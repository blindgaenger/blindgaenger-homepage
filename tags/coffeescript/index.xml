<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Coffeescript on blindgaenger</title>
    <link>http://blindgaenger.net/tags/coffeescript/</link>
    <description>Recent content in Coffeescript on blindgaenger</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="http://blindgaenger.net/tags/coffeescript/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>10 XXX One Liners to Impress Your Friends</title>
      <link>http://blindgaenger.net/articles/2011-06-09-10-xxx-one-liners-to-impress-your-friends/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://blindgaenger.net/articles/2011-06-09-10-xxx-one-liners-to-impress-your-friends/</guid>
      <description>

&lt;p&gt;There is some fascination to solve problems by writing as little code as possible. And even yesterday I visited the &lt;a href=&#34;http://hamburg.onruby.de/&#34;&gt;Rails Usergroup Hamburg&lt;/a&gt; where we played &lt;a href=&#34;https://github.com/chrisdb/rubygolfhh&#34;&gt;Ruby Golf&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s a great way to learn some not so common constructs of the language of your choice. Even if some of them don&amp;rsquo;t even try to be very expressive or elegant. But there&amp;rsquo;s always something you can learn from, right?&lt;/p&gt;

&lt;p&gt;Last week there came up interesting posts to show you &amp;lsquo;10 XXX One Liners to Impress Your Friends&amp;rsquo;. So let&amp;rsquo;s put some Scala/Ruby/CoffeeScript/Python/Haskell side by side. But please don&amp;rsquo;t judge a language by these examples. It&amp;rsquo;s more an inspiration.&lt;/p&gt;

&lt;p&gt;At the end of this article you&amp;rsquo;ll find a list of all original posts the code cames from. Have fun!&lt;/p&gt;

&lt;h1 id=&#34;1-multiple-each-item-in-a-list-by-2:2953910b393c81e82635af7f2602b860&#34;&gt;1. Multiple Each Item in a List by 2&lt;/h1&gt;

&lt;p&gt;Scala&lt;/p&gt;

&lt;p&gt;{{scala&lt;/p&gt;

&lt;p&gt;(1 to 10) map { _ * 2 }
}}&lt;/p&gt;

&lt;p&gt;Ruby&lt;/p&gt;

&lt;p&gt;{{ruby&lt;/p&gt;

&lt;p&gt;(1..10).map { |n| n * 2 }
}}&lt;/p&gt;

&lt;p&gt;CoffeeScript&lt;/p&gt;

&lt;p&gt;{{coffeescript&lt;/p&gt;

&lt;p&gt;[1..10].map (i) -&amp;gt; i*2&lt;/p&gt;

&lt;p&gt;OR&lt;/p&gt;

&lt;p&gt;i * 2 for i in [1..10]
}}&lt;/p&gt;

&lt;p&gt;Python&lt;/p&gt;

&lt;p&gt;{{python
  print map(lambda x: x * 2, range(1,11))
}}&lt;/p&gt;

&lt;p&gt;Haskell&lt;/p&gt;

&lt;p&gt;{{haskell
  map (*2) [1..10]
}}&lt;/p&gt;

&lt;h1 id=&#34;2-sum-a-list-of-numbers:2953910b393c81e82635af7f2602b860&#34;&gt;2. Sum a List of Numbers&lt;/h1&gt;

&lt;p&gt;Scala&lt;/p&gt;

&lt;p&gt;{{scala&lt;/p&gt;

&lt;p&gt;(1 to 1000).reduceLeft( _ + _ )
}}&lt;/p&gt;

&lt;p&gt;Ruby&lt;/p&gt;

&lt;p&gt;{{ruby&lt;/p&gt;

&lt;p&gt;(1..1000).inject { |sum, n| sum + n }&lt;/p&gt;

&lt;p&gt;OR&lt;/p&gt;

&lt;p&gt;(1..1000).inject(&amp;amp;:+)&lt;/p&gt;

&lt;p&gt;OR&lt;/p&gt;

&lt;p&gt;(1..1000).inject(:+)
}}&lt;/p&gt;

&lt;p&gt;CoffeeScript&lt;/p&gt;

&lt;p&gt;{{coffeescript&lt;/p&gt;

&lt;p&gt;[1..1000].reduce (t, s) -&amp;gt; t + s
}}&lt;/p&gt;

&lt;p&gt;Python&lt;/p&gt;

&lt;p&gt;{{python
  print sum(range(1,1001))
}}&lt;/p&gt;

&lt;p&gt;Haskell&lt;/p&gt;

&lt;p&gt;{{haskell
  foldl (+) 0 [1..1000]&lt;/p&gt;

&lt;p&gt;OR&lt;/p&gt;

&lt;p&gt;sum [1..1000]
}}&lt;/p&gt;

&lt;h1 id=&#34;3-verify-if-exists-in-a-string:2953910b393c81e82635af7f2602b860&#34;&gt;3. Verify if Exists in a String&lt;/h1&gt;

&lt;p&gt;Scala&lt;/p&gt;

&lt;p&gt;{{scala&lt;/p&gt;

&lt;p&gt;val wordlist = List(&amp;ldquo;scala&amp;rdquo;, &amp;ldquo;akka&amp;rdquo;, &amp;ldquo;play framework&amp;rdquo;, &amp;ldquo;sbt&amp;rdquo;, &amp;ldquo;typesafe&amp;rdquo;)
  val tweet = &amp;ldquo;This is an example tweet talking about scala and sbt.&amp;rdquo;
  (words.foldLeft(false)( _ || tweet.contains(_) ))
}}&lt;/p&gt;

&lt;p&gt;Ruby&lt;/p&gt;

&lt;p&gt;{{ruby&lt;/p&gt;

&lt;p&gt;words = [&amp;ldquo;scala&amp;rdquo;, &amp;ldquo;akka&amp;rdquo;, &amp;ldquo;play framework&amp;rdquo;, &amp;ldquo;sbt&amp;rdquo;, &amp;ldquo;typesafe&amp;rdquo;]
  tweet = &amp;ldquo;This is an example tweet talking about scala and sbt.&amp;rdquo;
  words.any? { |word| tweet.include?(word) }
}}&lt;/p&gt;

&lt;p&gt;CoffeeScript&lt;/p&gt;

&lt;p&gt;{{coffeescript&lt;/p&gt;

&lt;p&gt;wordList = [&amp;ldquo;coffeescript&amp;rdquo;, &amp;ldquo;eko&amp;rdquo;, &amp;ldquo;play framework&amp;rdquo;, &amp;ldquo;and stuff&amp;rdquo;, &amp;ldquo;falsy&amp;rdquo;]
  tweet = &amp;ldquo;This is an example tweet talking about javascript and stuff.&amp;rdquo;
  wordList.some (word) -&amp;gt; ~tweet.indexOf word
}}&lt;/p&gt;

&lt;p&gt;Python&lt;/p&gt;

&lt;p&gt;{{python
  wordlist = [&amp;ldquo;scala&amp;rdquo;, &amp;ldquo;akka&amp;rdquo;, &amp;ldquo;play framework&amp;rdquo;, &amp;ldquo;sbt&amp;rdquo;, &amp;ldquo;typesafe&amp;rdquo;]
  tweet = &amp;ldquo;This is an example tweet talking about scala and sbt.&amp;rdquo;
  print map(lambda x: x in tweet.split(),wordlist)
}}&lt;/p&gt;

&lt;p&gt;Haskell&lt;/p&gt;

&lt;p&gt;{{haskell
  import Data.List
  let wordlist = [&amp;ldquo;monad&amp;rdquo;, &amp;ldquo;monoid&amp;rdquo;, &amp;ldquo;Galois&amp;rdquo;, &amp;ldquo;ghc&amp;rdquo;, &amp;ldquo;SPJ&amp;rdquo;]
  let tweet = &amp;ldquo;This is an example tweet talking about SPJ interviewing with Galois&amp;rdquo;
  or $ map (flip isInfixOf tweet) wordlist&lt;/p&gt;

&lt;p&gt;OR&lt;/p&gt;

&lt;p&gt;any (flip isInfixOf tweet) wordlist
}}&lt;/p&gt;

&lt;h1 id=&#34;4-read-in-a-file:2953910b393c81e82635af7f2602b860&#34;&gt;4. Read in a File&lt;/h1&gt;

&lt;p&gt;Scala&lt;/p&gt;

&lt;p&gt;{{scala&lt;/p&gt;

&lt;p&gt;val fileText = io.Source.fromFile(&amp;ldquo;data.txt&amp;rdquo;).mkString
  val fileLines = io.Source.fromFile(&amp;ldquo;data.txt&amp;rdquo;).getLines.toList
}}&lt;/p&gt;

&lt;p&gt;Ruby&lt;/p&gt;

&lt;p&gt;{{ruby&lt;/p&gt;

&lt;p&gt;file_text = File.read(&amp;ldquo;data.txt&amp;rdquo;)
  file_lines = File.readlines(&amp;ldquo;data.txt&amp;rdquo;)
}}&lt;/p&gt;

&lt;p&gt;CoffeeScript&lt;/p&gt;

&lt;p&gt;{{coffeescript&lt;/p&gt;

&lt;p&gt;fs.readFile &amp;lsquo;data.txt&amp;rsquo;, (err, data) -&amp;gt; fileText = data&lt;/p&gt;

&lt;p&gt;OR (sync)&lt;/p&gt;

&lt;p&gt;fileText = fs.readFileSync(&amp;lsquo;data.txt&amp;rsquo;).toString()
}}&lt;/p&gt;

&lt;p&gt;Python&lt;/p&gt;

&lt;p&gt;{{python
  print open(&amp;ldquo;ten_one_liners.py&amp;rdquo;).readlines()
}}&lt;/p&gt;

&lt;p&gt;Haskell&lt;/p&gt;

&lt;p&gt;{{haskell
  fileText &amp;lt;- readFile &amp;ldquo;data.txt&amp;rdquo;
  let fileLines = lines fileText&lt;/p&gt;

&lt;p&gt;OR&lt;/p&gt;

&lt;p&gt;let fileLines = fmap lines $ readFile &amp;ldquo;data.txt&amp;rdquo;
}}&lt;/p&gt;

&lt;h1 id=&#34;5-happy-birthday-to-you:2953910b393c81e82635af7f2602b860&#34;&gt;5. Happy Birthday to You!&lt;/h1&gt;

&lt;p&gt;Scala&lt;/p&gt;

&lt;p&gt;{{scala&lt;/p&gt;

&lt;p&gt;(1 to 4).map { i =&amp;gt; &amp;ldquo;Happy Birthday &amp;rdquo; + (if (i == 3) &amp;ldquo;dear NAME&amp;rdquo; else &amp;ldquo;to You&amp;rdquo;) }.foreach { println }
}}&lt;/p&gt;

&lt;p&gt;Ruby&lt;/p&gt;

&lt;p&gt;{{ruby&lt;/p&gt;

&lt;p&gt;4.times { |n| puts &amp;ldquo;Happy Birthday #{n==2 ? &amp;ldquo;dear Tony&amp;rdquo; : &amp;ldquo;to You&amp;rdquo;}&amp;rdquo; }
}}&lt;/p&gt;

&lt;p&gt;CoffeeScript&lt;/p&gt;

&lt;p&gt;{{coffeescript&lt;/p&gt;

&lt;p&gt;[1..4].map (i) -&amp;gt; console.log &amp;ldquo;Happy Birthday &amp;rdquo; + (if i is 3 then &amp;ldquo;dear Robert&amp;rdquo; else &amp;ldquo;to You&amp;rdquo;)&lt;/p&gt;

&lt;p&gt;OR&lt;/p&gt;

&lt;p&gt;console.log &amp;ldquo;Happy Birthday #{if i is 3 then &amp;ldquo;dear Robert&amp;rdquo; else &amp;ldquo;to You&amp;rdquo;}&amp;rdquo; for i in [1..4]
}}&lt;/p&gt;

&lt;p&gt;Python&lt;/p&gt;

&lt;p&gt;{{python
  print map(lambda x: &amp;ldquo;Happy Birthday to &amp;rdquo; + (&amp;ldquo;you&amp;rdquo; if x != 2 else &amp;ldquo;dear Name&amp;rdquo;),range(4))
}}&lt;/p&gt;

&lt;p&gt;Haskell&lt;/p&gt;

&lt;p&gt;{{haskell
  mapM_ putStrLn [&amp;ldquo;Happy Birthday &amp;rdquo; ++ (if x == 3 then &amp;ldquo;dear NAME&amp;rdquo; else &amp;ldquo;to You&amp;rdquo;) | x &amp;lt;- [1..4]]
}}&lt;/p&gt;

&lt;h1 id=&#34;6-filter-list-of-numbers:2953910b393c81e82635af7f2602b860&#34;&gt;6. Filter list of numbers&lt;/h1&gt;

&lt;p&gt;Scala&lt;/p&gt;

&lt;p&gt;{{scala&lt;/p&gt;

&lt;p&gt;val (passed, failed) = List(49, 58, 76, 82, 88, 90) partition ( _ &amp;gt; 60 )
}}&lt;/p&gt;

&lt;p&gt;Ruby&lt;/p&gt;

&lt;p&gt;{{ruby&lt;/p&gt;

&lt;p&gt;[49, 58, 76, 82, 88, 90].partition { |n| n &amp;gt; 60 }
}}&lt;/p&gt;

&lt;p&gt;CoffeeScript&lt;/p&gt;

&lt;p&gt;{{coffeescript&lt;/p&gt;

&lt;p&gt;passed = []
  failed = []
  (if score &amp;gt; 60 then passed else failed).push score for score in [49, 58, 76, 82, 88, 90]&lt;/p&gt;

&lt;p&gt;}}&lt;/p&gt;

&lt;p&gt;Python&lt;/p&gt;

&lt;p&gt;{{python
  print reduce(lambda(a,b),c: (a+[c],b) if c &amp;gt; 60 else (a,b + [c]), [49, 58, 76, 82, 88, 90],([],[]))
}}&lt;/p&gt;

&lt;p&gt;Haskell&lt;/p&gt;

&lt;p&gt;{{haskell
  let (passed, failed) = partition (&amp;gt;60) [49, 58, 76, 82, 88, 90]
}}&lt;/p&gt;

&lt;h1 id=&#34;7-fetch-and-parse-an-xml-web-service:2953910b393c81e82635af7f2602b860&#34;&gt;7. Fetch and Parse an XML web service&lt;/h1&gt;

&lt;p&gt;Scala&lt;/p&gt;

&lt;p&gt;{{scala&lt;/p&gt;

&lt;p&gt;val results = XML.load(&amp;ldquo;&lt;a href=&#34;http://search.twitter.com/search.atom?&amp;amp;q=scala&amp;quot;&#34;&gt;http://search.twitter.com/search.atom?&amp;amp;q=scala&amp;quot;&lt;/a&gt;)
}}&lt;/p&gt;

&lt;p&gt;Ruby&lt;/p&gt;

&lt;p&gt;{{ruby&lt;/p&gt;

&lt;p&gt;require &amp;lsquo;open-uri&amp;rsquo;
  require &amp;lsquo;hpricot&amp;rsquo;
  results = Hpricot(open(&amp;ldquo;&lt;a href=&#34;http://search.twitter.com/search.atom?&amp;amp;q=scala&amp;quot;)&#34;&gt;http://search.twitter.com/search.atom?&amp;amp;q=scala&amp;quot;)&lt;/a&gt;)
}}&lt;/p&gt;

&lt;p&gt;CoffeeScript&lt;/p&gt;

&lt;p&gt;{{coffeescript&lt;/p&gt;

&lt;p&gt;request.get { uri:&amp;lsquo;path/to/api.json&amp;rsquo;, json: true }, (err, r, body) -&amp;gt; results = body
}}&lt;/p&gt;

&lt;p&gt;Python&lt;/p&gt;

&lt;p&gt;{{python
  from xml.dom.minidom import parse, parseString
  import urllib2
  print parse(urllib2.urlopen(&amp;ldquo;&lt;a href=&#34;http://search.twitter.com/search.atom?&amp;amp;q=python&amp;quot;)).toprettyxml(encoding=&amp;quot;utf-8&amp;quot;&#34;&gt;http://search.twitter.com/search.atom?&amp;amp;q=python&amp;quot;)).toprettyxml(encoding=&amp;quot;utf-8&amp;quot;&lt;/a&gt;)
}}&lt;/p&gt;

&lt;p&gt;Haskell&lt;/p&gt;

&lt;p&gt;{{haskell
  import Network.Curl
  import Text.XML.Light
  import Control.Monad
  let results = liftM parseXMLDoc $ liftM snd (curlGetString &amp;ldquo;&lt;a href=&#34;http://search.twitter.com/search.atom?&amp;amp;q=haskell&amp;quot;&#34;&gt;http://search.twitter.com/search.atom?&amp;amp;q=haskell&amp;quot;&lt;/a&gt; [])&lt;/p&gt;

&lt;p&gt;OR&lt;/p&gt;

&lt;p&gt;Control.Applicative
  let results = parseXMLDoc . snd &amp;lt;$&amp;gt; curlGetString &amp;ldquo;&lt;a href=&#34;http://search.twitter.com/search.atom?&amp;amp;q=haskell&amp;quot;&#34;&gt;http://search.twitter.com/search.atom?&amp;amp;q=haskell&amp;quot;&lt;/a&gt; []
}}&lt;/p&gt;

&lt;h1 id=&#34;8-find-minimum-or-maximum-in-a-list:2953910b393c81e82635af7f2602b860&#34;&gt;8. Find minimum (or maximum) in a List&lt;/h1&gt;

&lt;p&gt;Scala&lt;/p&gt;

&lt;p&gt;{{scala&lt;/p&gt;

&lt;p&gt;List(14, 35, -7, 46, 98).reduceLeft ( _ min _ )
  List(14, 35, -7, 46, 98).reduceLeft ( _ max _ )
}}&lt;/p&gt;

&lt;p&gt;Ruby&lt;/p&gt;

&lt;p&gt;{{ruby&lt;/p&gt;

&lt;p&gt;[14, 35, -7, 46, 98].min
  [14, 35, -7, 46, 98].max
}}&lt;/p&gt;

&lt;p&gt;CoffeeScript&lt;/p&gt;

&lt;p&gt;{{coffeescript&lt;/p&gt;

&lt;p&gt;Math.max.apply @, [14, 35, -7, 46, 98]
  Math.min.apply @, [14, 35, -7, 46, 98]
}}&lt;/p&gt;

&lt;p&gt;Python&lt;/p&gt;

&lt;p&gt;{{python
  print min([14, 35, -7, 46, 98])
  print max([14, 35, -7, 46, 98])
}}&lt;/p&gt;

&lt;p&gt;Haskell&lt;/p&gt;

&lt;p&gt;{{haskell
  foldl1 min [14, 35, -7, 46, 98]
  foldl1 max [14, 35, -7, 46, 98]&lt;/p&gt;

&lt;p&gt;OR&lt;/p&gt;

&lt;p&gt;minimum [14, 35, -7, 46, 98]
  maximum [14, 35, -7, 46, 98]
}}&lt;/p&gt;

&lt;h1 id=&#34;9-parallel-processing:2953910b393c81e82635af7f2602b860&#34;&gt;9. Parallel Processing&lt;/h1&gt;

&lt;p&gt;Scala&lt;/p&gt;

&lt;p&gt;{{scala&lt;/p&gt;

&lt;p&gt;val result = dataList.par.map(line =&amp;gt; processItem(line))
}}&lt;/p&gt;

&lt;p&gt;Ruby&lt;/p&gt;

&lt;p&gt;{{ruby&lt;/p&gt;

&lt;p&gt;require &amp;lsquo;parallel&amp;rsquo;&lt;/p&gt;

&lt;p&gt;Parallel.map(lots_of_data) do |chunk|
    heavy_computation(chunk)
  end
}}&lt;/p&gt;

&lt;p&gt;CoffeeScript&lt;/p&gt;

&lt;p&gt;{{coffeescript&lt;/p&gt;

&lt;p&gt;SKIP
}}&lt;/p&gt;

&lt;p&gt;Python&lt;/p&gt;

&lt;p&gt;{{python
  import multiprocessing
  import math&lt;/p&gt;

&lt;p&gt;print list(multiprocessing.Pool(processes=4).map(math.exp,range(1,11)))
}}&lt;/p&gt;

&lt;p&gt;Haskell&lt;/p&gt;

&lt;p&gt;{{haskell
  import Control.Parallel
  import Control.Parallel.Strategies&lt;/p&gt;

&lt;p&gt;parMap rseq (*2) [1..100]
}}&lt;/p&gt;

&lt;h1 id=&#34;10-sieve-of-eratosthenes:2953910b393c81e82635af7f2602b860&#34;&gt;10. Sieve of Eratosthenes&lt;/h1&gt;

&lt;p&gt;Scala&lt;/p&gt;

&lt;p&gt;{{scala&lt;/p&gt;

&lt;p&gt;(n: Int) =&amp;gt; (2 to n) |&amp;gt; (r =&amp;gt; r.foldLeft(r.toSet)((ps, x) =&amp;gt; if (ps(x)) ps &amp;ndash; (x * x to n by x) else ps))
}}&lt;/p&gt;

&lt;p&gt;Ruby&lt;/p&gt;

&lt;p&gt;{{ruby&lt;/p&gt;

&lt;p&gt;index = 0
  while primes[index]**2 &amp;lt;= primes.last
        prime = primes[index]
        primes = primes.select { |x| x == prime || x % prime != 0 }
        index += 1
  end
  p primes
}}&lt;/p&gt;

&lt;p&gt;CoffeeScript&lt;/p&gt;

&lt;p&gt;{{coffeescript&lt;/p&gt;

&lt;p&gt;sieve = (num) -&amp;gt;
      numbers = [2..num]
      while ((pos = numbers[0]) * pos) &amp;lt;= num
          delete numbers[i] for n, i in numbers by pos
          numbers.shift()
      numbers.indexOf(num) &amp;gt; -1
}}&lt;/p&gt;

&lt;p&gt;Python&lt;/p&gt;

&lt;p&gt;{{python
  print sorted(set(range(2,n+1)).difference(set((p * f) for p in range(2,int(n**0.5) + 2) for f in range(2,(n/p)+1))))
}}&lt;/p&gt;

&lt;p&gt;Haskell&lt;/p&gt;

&lt;p&gt;{{haskell
  let pgen (p:xs) = p : pgen [x|x &amp;lt;- xs, x &lt;code&gt;mod&lt;/code&gt; p &amp;gt; 0]
  take 40 (pgen [2..])
}}&lt;/p&gt;

&lt;h1 id=&#34;links:2953910b393c81e82635af7f2602b860&#34;&gt;Links&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://solog.co/47/10-scala-one-liners-to-impress-your-friends/&#34;&gt;10 Scala One Liners to Impress Your Friends&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://programmingzen.com/2011/06/02/10-ruby-one-liners-to-impress-your-friends/&#34;&gt;10 Ruby One Liners to Impress Your Friends&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://ricardo.cc/2011/06/02/10-CoffeeScript-One-Liners-to-Impress-Your-Friends.html&#34;&gt;10 CoffeeScript One Liners to Impress Your Friends&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://codeblog.dhananjaynene.com/2011/06/10-python-one-liners-to-impress-your-friends/&#34;&gt;10 Python One Liners to Impress Your Friends&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.fogus.me/2011/06/03/10-haskell-one-liners-to-impress-your-friends/&#34;&gt;10 Haskell One Liners to Impress Your Friends&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>