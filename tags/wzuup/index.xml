<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Wzuup on blindgaenger</title>
    <link>http://blindgaenger.net/tags/wzuup/</link>
    <description>Recent content in Wzuup on blindgaenger</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="http://blindgaenger.net/tags/wzuup/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Compile Nginx</title>
      <link>http://blindgaenger.net/articles/2008-07-13-compile-nginx/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://blindgaenger.net/articles/2008-07-13-compile-nginx/</guid>
      <description>

&lt;p&gt;Download and unzip the sources.
{{bash
$ cd /tmp
$ wget &lt;a href=&#34;http://sysoev.ru/nginx/nginx-0.7.6.tar.gz&#34;&gt;http://sysoev.ru/nginx/nginx-0.7.6.tar.gz&lt;/a&gt;
$ tar -xzvf nginx-0.7.6.tar.gz
$ cd nginx-0.7.6/
}}&lt;/p&gt;

&lt;p&gt;Make sure the OpenSSL is available, needed for &lt;code&gt;--with-http_ssl_module&lt;/code&gt;
{{bash
$ sudo apt-get install libssl-dev
}}&lt;/p&gt;

&lt;p&gt;Configure with SSL and WebDAV module enabled
&lt;a href=&#34;http://wiki.codemongers.com/NginxInstallOptions&#34;&gt;http://wiki.codemongers.com/NginxInstallOptions&lt;/a&gt;
{{bash
$ ./configure &amp;ndash;with-http_ssl_module &amp;ndash;with-http_dav_module
&amp;hellip;
Configuration summary
  + using system PCRE library
  + using system OpenSSL library
  + md5 library is not used
  + sha1 library is not used
  + using system zlib library&lt;/p&gt;

&lt;p&gt;nginx path prefix: &amp;ldquo;/usr/local/nginx&amp;rdquo;
  nginx binary file: &amp;ldquo;/usr/local/nginx/sbin/nginx&amp;rdquo;
  nginx configuration prefix: &amp;ldquo;/usr/local/nginx/conf&amp;rdquo;
  nginx configuration file: &amp;ldquo;/usr/local/nginx/conf/nginx.conf&amp;rdquo;
  nginx pid file: &amp;ldquo;/usr/local/nginx/logs/nginx.pid&amp;rdquo;
  nginx error log file: &amp;ldquo;/usr/local/nginx/logs/error.log&amp;rdquo;
  nginx http access log file: &amp;ldquo;/usr/local/nginx/logs/access.log&amp;rdquo;
  nginx http client request body temporary files: &amp;ldquo;/usr/local/nginx/client_body_temp&amp;rdquo;
  nginx http proxy temporary files: &amp;ldquo;/usr/local/nginx/proxy_temp&amp;rdquo;
  nginx http fastcgi temporary files: &amp;ldquo;/usr/local/nginx/fastcgi_temp&amp;rdquo;
}}&lt;/p&gt;

&lt;p&gt;Build and install it.
{{bash
$ make
$ sudo make install
&amp;hellip;
}}&lt;/p&gt;

&lt;p&gt;Done!&lt;/p&gt;

&lt;h1 id=&#34;modules:1b24ca547d02c2cfa67a1074f699e88a&#34;&gt;Modules&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://wiki.nginx.org/NginxModules&#34;&gt;http://wiki.nginx.org/NginxModules&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://wiki.nginx.org/NginxHttpAuthBasicModule&#34;&gt;http://wiki.nginx.org/NginxHttpAuthBasicModule&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://wiki.nginx.org/NginxHttpProxyModule&#34;&gt;http://wiki.nginx.org/NginxHttpProxyModule&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://wiki.nginx.org/NginxHttpSslModule&#34;&gt;http://wiki.nginx.org/NginxHttpSslModule&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;links:1b24ca547d02c2cfa67a1074f699e88a&#34;&gt;Links&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://articles.slicehost.com/2007/10/16/ubuntu-lts-installing-nginx&#34;&gt;Ubuntu LTS - installing nginx&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Compile and install Monit</title>
      <link>http://blindgaenger.net/articles/2008-07-15-compile-and-install-monit/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://blindgaenger.net/articles/2008-07-15-compile-and-install-monit/</guid>
      <description>&lt;p&gt;Find the latest stable Monit at &lt;a href=&#34;http://www.tildeslash.com/monit/download/&#34;&gt;http://www.tildeslash.com/monit/download/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Download and unpack
{{bash
$ cd /tmp
$  wget &lt;a href=&#34;http://www.tildeslash.com/monit/dist/monit-4.10.1.tar.gz&#34;&gt;http://www.tildeslash.com/monit/dist/monit-4.10.1.tar.gz&lt;/a&gt;
$ tar -xvzf monit-4.10.1.tar.gz
$ cd monit-4.10.1
}}&lt;/p&gt;

&lt;p&gt;Configure
{{bash
$ ./configure
&amp;hellip;
monit has been configured with the following options:
                Architecture: LINUX
                 SSL support: enabled
       SSL include directory: /usr/include
       SSL library directory: /usr/lib
         resource monitoring: enabled
               resource code: sysdep_LINUX.c
         large files support: enabled
              Compiler flags: -g -O2 -Wall -D _REENTRANT -I/usr/include
                Linker flags: -lpthread -lcrypt -lresolv -lnsl  -L/usr/lib -lssl -lcrypto
           pid file location: /var/run
}}&lt;/p&gt;

&lt;p&gt;Make and install
{{bash
$ make
&amp;hellip;
$ make install
flex -i l.l
gcc -c -DLINUX -DSYSCONFDIR=&amp;rdquo;\&amp;ldquo;/usr/local/etc\&amp;ldquo;&amp;rdquo; -I. -I./device -I./http -I./process -I./protocols -g -O2 -Wall -D _REENTRANT -I/usr/include  lex.yy.c -o lex.yy.o
gcc  alert.o collector.o control.o daemonize.o env.o event.o file.o gc.o getloadavg.o http.o log.o md5.o monitor.o net.o process.o sendmail.o sha.o signal.o socket.o spawn.o ssl.o state.o status.o util.o validate.o xmalloc.o xml.o device/device_common.o http/base64.o http/cervlet.o http/engine.o http/processor.o process/process_common.o protocols/apache_status.o protocols/clamav.o protocols/default.o protocols/dns.o protocols/dwp.o protocols/ftp.o protocols/generic.o protocols/http.o protocols/imap.o protocols/ldap2.o protocols/ldap3.o protocols/mysql.o protocols/nntp.o protocols/ntp3.o protocols/pgsql.o protocols/pop.o protocols/postfix_policy.o protocols/protocol.o protocols/rdate.o protocols/rsync.o protocols/smtp.o protocols/ssh.o protocols/tns.o device/sysdep_LINUX.o process/sysdep_LINUX.o y.tab.o lex.yy.o  -lfl -lpthread -lcrypt -lresolv -lnsl  -L/usr/lib -lssl -lcrypto -o monit
/usr/bin/install -c  -m 755 -d /usr/local/bin || exit 1
/usr/bin/install -c  -m 755 -d /usr/local/share/man/man1 || exit 1
/usr/bin/install -c  -m 555 -s monit /usr/local/bin || exit 1
/usr/bin/install -c  -m 444 monit.1 /usr/local/share/man/man1/monit.1 || exit 1
}}&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Configure Mongrel cluster for Rails</title>
      <link>http://blindgaenger.net/articles/2008-07-14-configure-mongrel-cluster-for-rails/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://blindgaenger.net/articles/2008-07-14-configure-mongrel-cluster-for-rails/</guid>
      <description>&lt;p&gt;Go to the rails app directory.
{{bash
$ cd /var/rails/wzuup
}}&lt;/p&gt;

&lt;p&gt;Configure the mongrel cluster for this rails app.
{{bash
$ mongrel_rails cluster::configure -a 127.0.0.1 -p 8000 -N 1 -e production -c /var/rails/wzuup
Writing configuration file to config/mongrel_cluster.yml.
}}&lt;/p&gt;

&lt;p&gt;If server should run under &lt;code&gt;www.example.com/wzuup&lt;/code&gt;. The new &lt;code&gt;--prefix $APP_ROOT&lt;/code&gt;
command allows Mongrel Applications to properly &lt;em&gt;ignore&lt;/em&gt; the prefix. Prior to
this enhancement, the web server (not mongrel) needed to be configured to strip
out the prefix.
{{bash
$ mongrel_rails cluster::configure -e production -p 8000 -N 2 -c /var/rails/wzuup -a 127.0.0.1 &amp;ndash;prefix /wzuup
}}&lt;/p&gt;

&lt;p&gt;The syntax is very easy to understand.
* listen to localhost only
  &lt;code&gt;-a 127.0.0.1&lt;/code&gt;
* use port 8000
  &lt;code&gt;-p 8000&lt;/code&gt;
* start only one mongrel server
  &lt;em&gt;Important:&lt;/em&gt; for &lt;code&gt;N=3&lt;/code&gt; three servers with ports 8000, 8001 and 8002 will be used
  &lt;code&gt;-N 1&lt;/code&gt;
* run the rails app in the production environment
  &lt;code&gt;-e production&lt;/code&gt;
* the root of the rails app
  &lt;code&gt;-c /var/rails/wzuup&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Start the mongrel cluster
{{bash
$ mongrel_rails cluster::start
starting port 8000
}}&lt;/p&gt;

&lt;p&gt;Check if mongrel servers are running
{{bash
$ ps ax | grep mongrel
 6836 ?        Sl     0:01 /usr/bin/ruby1.8 /usr/bin/mongrel_rails start -d -e production -a 127.0.0.1 -c /var/rails/wzuup -p 8000 -P tmp/pids/mongrel.8000.pid -l log/mongrel.8000.log
 6844 pts/0    R+     0:00 grep mongrel
}}&lt;/p&gt;

&lt;p&gt;Stop the mongrel cluster
{{bash
$ mongrel_rails cluster::stop
stopping port 8000
}}&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Configure Monit</title>
      <link>http://blindgaenger.net/articles/2008-07-15-configure-monit/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://blindgaenger.net/articles/2008-07-15-configure-monit/</guid>
      <description>

&lt;p&gt;Monit is configured by &lt;code&gt;~/.monitrc&lt;/code&gt; which needs to be created after installation.
{{bash
$ vim .monitrc
}}&lt;/p&gt;

&lt;p&gt;Create a minimal control file.
{{bash&lt;/p&gt;

&lt;h1 id=&#34;check-every-60sec:f648afa14b0e43b4869bbb44159002f2&#34;&gt;check every 60sec&lt;/h1&gt;

&lt;p&gt;set daemon 60&lt;/p&gt;

&lt;h1 id=&#34;configure-the-notification-on-alert:f648afa14b0e43b4869bbb44159002f2&#34;&gt;configure the notification on alert&lt;/h1&gt;

&lt;p&gt;set mailserver localhost
set mail-format { from: monit@blindgaenger.net }
set alert blindgaenger@gmail.com&lt;/p&gt;

&lt;p&gt;set httpd port 2812 and
    use address localhost  # only accept connection from localhost
    allow localhost        # allow localhost to connect to the server and
}}&lt;/p&gt;

&lt;p&gt;Run syntax check for the control file.
{{bash
$ monit -t
monit: The control file &amp;lsquo;/root/.monitrc&amp;rsquo; must have permissions no more than -rwx&amp;mdash;&amp;mdash; (0700); right now permissions are -rw-r&amp;ndash;r&amp;ndash; (0644).
}}&lt;/p&gt;

&lt;p&gt;Change the permissions and recheck
{{bash
$ chmod 0700 .monitrc
$ monit -t
Control file syntax OK
}}&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Configure Nginx</title>
      <link>http://blindgaenger.net/articles/2008-07-13-configure-nginx/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://blindgaenger.net/articles/2008-07-13-configure-nginx/</guid>
      <description>

&lt;p&gt;Note that these config worked well for me. Please check your needs and read the
official documentation about &lt;a href=&#34;http://wiki.nginx.org/NginxConfiguration&#34;&gt;Nginx Configuration&lt;/a&gt;
befor using it for your projects.&lt;/p&gt;

&lt;p&gt;If you followed the instructions described in my previous post
&lt;a href=&#34;compile-nginx.html&#34;&gt;Compile Nginx&lt;/a&gt;, then the configuration is located in
&lt;code&gt;/usr/local/nginx/conf/nginx.conf&lt;/code&gt;.&lt;/p&gt;

&lt;h1 id=&#34;configuration:f51bd01af491830d509b471a226a4609&#34;&gt;Configuration&lt;/h1&gt;

&lt;p&gt;Basically it looks like this. The missing server configs are described in detail
below.&lt;/p&gt;

&lt;p&gt;{% highlight bash %}&lt;/p&gt;

&lt;h1 id=&#34;user-and-group-to-run-as:f51bd01af491830d509b471a226a4609&#34;&gt;user and group to run as&lt;/h1&gt;

&lt;p&gt;#user   nginx nginx;&lt;/p&gt;

&lt;p&gt;worker_processes  1;
events {
  # Number of worker connections. 1024 is a good default
  worker_connections  1024;
}&lt;/p&gt;

&lt;p&gt;http {
  include mime.types;
  default_type application/octet-stream;&lt;/p&gt;

&lt;p&gt;access_log logs/access.log;
  error_log logs/error.log debug;&lt;/p&gt;

&lt;p&gt;# no sendfile on OSX
  sendfile on;&lt;/p&gt;

&lt;p&gt;# These are good default values.
  tcp_nopush on;
  tcp_nodelay off;&lt;/p&gt;

&lt;p&gt;# output compression saves bandwidth
  gzip on;
  gzip_http_version 1.0;
  gzip_comp_level 2;
  gzip_proxied any;
  gzip_types text/plain text/html text/css application/x-javascript text/xml application/xml application/xml+rss text/javascript;&lt;/p&gt;

&lt;p&gt;##################################
  # include your server configs here
  ##################################&lt;/p&gt;

&lt;p&gt;}
{% endhighlight %}&lt;/p&gt;

&lt;h1 id=&#34;static-pages:f51bd01af491830d509b471a226a4609&#34;&gt;Static pages&lt;/h1&gt;

&lt;p&gt;This server config served our static &amp;ldquo;coming soon&amp;rdquo; page. Actually the page was
hosted somewhere in the internet at &lt;code&gt;http://wzuup.de&lt;/code&gt;. What I needed to do is to
redirect the content to &lt;code&gt;wzuup.com&lt;/code&gt;. Users entering &lt;code&gt;www.wzuup.com&lt;/code&gt; will be
permanently rewritten to &lt;code&gt;wzuup.com&lt;/code&gt;. Pretty simple if you try to read it!&lt;/p&gt;

&lt;p&gt;{% highlight bash %}
##################################&lt;/p&gt;

&lt;h1 id=&#34;http-wzuup-com:f51bd01af491830d509b471a226a4609&#34;&gt;&lt;a href=&#34;http://wzuup.com&#34;&gt;http://wzuup.com&lt;/a&gt;&lt;/h1&gt;

&lt;p&gt;server {
  listen       80;
  server_name  wzuup.com www.wzuup.com;
  access_log   logs/wzuup.access.log;&lt;/p&gt;

&lt;p&gt;# www.wzuup.com =&amp;gt; wzuup.com
  if ($host ~* &amp;ldquo;www&amp;rdquo;) {
    rewrite ^(.*)$ &lt;a href=&#34;http://wzuup.com$1&#34;&gt;http://wzuup.com$1&lt;/a&gt; permanent;
    break;
  }&lt;/p&gt;

&lt;p&gt;location / {
    # redirect the request
    # so &lt;a href=&#34;http://wzuup.de/&#34;&gt;http://wzuup.de/&lt;/a&gt; will appear at &lt;a href=&#34;http://wzuup.com/&#34;&gt;http://wzuup.com/&lt;/a&gt;
    proxy_pass        &lt;a href=&#34;http://wzuup.de&#34;&gt;http://wzuup.de&lt;/a&gt;;
    proxy_set_header  X-Real-IP  $remote_addr;
  }&lt;/p&gt;

&lt;p&gt;error_page   500 502 503 504  /50x.html;
  location = /50x.html {
    root   html;
  }
}
{% endhighlight %}&lt;/p&gt;

&lt;h1 id=&#34;rails-application:f51bd01af491830d509b471a226a4609&#34;&gt;Rails application&lt;/h1&gt;

&lt;p&gt;At staging we share our last stable build with the rest of the team or some
chosen people. That&amp;rsquo;s why it uses &lt;code&gt;ssl&lt;/code&gt; and &lt;code&gt;auth_basic&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The interesting part is the &lt;code&gt;mongrel_staging&lt;/code&gt; section. Mongrel instance on
ports 8001 and 8001 are serving our Rails app. Nginx tries to server the
requested files from its &lt;code&gt;root&lt;/code&gt; dir (see config). But if the filename does not
exist (&lt;code&gt;if (!-f $request_filename)&lt;/code&gt;) then the request is passed to one mongrel.&lt;/p&gt;

&lt;p&gt;Of course, you can put multiple mongrel instances in the &lt;code&gt;upstream&lt;/code&gt; section. For
Rails projects register all servers of a specific cluster. Nginx tries to load
balance them. (&lt;a href=&#34;http://wiki.nginx.org/NginxChsHttpUpstreamModule&#34;&gt;http://wiki.nginx.org/NginxChsHttpUpstreamModule&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;{% highlight bash %}
##################################&lt;/p&gt;

&lt;h1 id=&#34;https-staging-wzuup-com:f51bd01af491830d509b471a226a4609&#34;&gt;&lt;a href=&#34;https://staging.wzuup.com&#34;&gt;https://staging.wzuup.com&lt;/a&gt;&lt;/h1&gt;

&lt;p&gt;upstream mongrel_staging {
  server 127.0.0.1:8000;
  server 127.0.0.1:8001;
}&lt;/p&gt;

&lt;p&gt;server {
  listen               443;
  ssl                  on;
  ssl_certificate      wzuup.crt;
  ssl_certificate_key  wzuup.key;&lt;/p&gt;

&lt;p&gt;server_name  staging.wzuup.com staging.blindgaenger.net;
  root   /var/rails/wzuup/public;
  access_log  logs/staging.access.log;&lt;/p&gt;

&lt;p&gt;auth_basic            &amp;ldquo;Wzuup Staging&amp;rdquo;;
  auth_basic_user_file  htpasswd;&lt;/p&gt;

&lt;p&gt;# this rewrites all the requests to the maintenance.html
  # page if it exists in the doc root. This is for capistrano&amp;rsquo;s
  # disable web task
  if (-f $document_root/maintenance.html){
    rewrite  ^(.*)$  /maintenance.html last;
    break;
  }&lt;/p&gt;

&lt;p&gt;location / {
    proxy_set_header  X-Real-IP  $remote_addr;
    proxy_set_header  X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header  X_FORWARDED_PROTO https;
    proxy_set_header Host $http_host;
    proxy_redirect false;
    if (-f $request_filename/index.html) {
      rewrite (.&lt;em&gt;) $1/index.html break;
    }
    if (-f $request_filename.html) {
      rewrite (.&lt;/em&gt;) $1.html break;
    }
    if (!-f $request_filename) {
      proxy_pass &lt;a href=&#34;http://mongrel_staging&#34;&gt;http://mongrel_staging&lt;/a&gt;;
      break;
    }
  }&lt;/p&gt;

&lt;p&gt;index  index.html index.htm;
  error_page   500 502 503 504  /50x.html;
  location = /50x.html {
    root   html;
  }
}
{% endhighlight %}&lt;/p&gt;

&lt;h1 id=&#34;subversion:f51bd01af491830d509b471a226a4609&#34;&gt;Subversion&lt;/h1&gt;

&lt;p&gt;Unfortunately Nginx can not be used to fully serve a SVN repository, because the
dav module doesn&amp;rsquo;t support PROPFIND (see &lt;a href=&#34;http://www.ruby-forum.com/topic/140841&#34;&gt;http://www.ruby-forum.com/topic/140841&lt;/a&gt;).
So currently the best way is to use Apache for SVN and serve it via Nginx.&lt;/p&gt;

&lt;p&gt;{% highlight bash %}
##################################&lt;/p&gt;

&lt;h1 id=&#34;https-svn-wzuup-com:f51bd01af491830d509b471a226a4609&#34;&gt;&lt;a href=&#34;https://svn.wzuup.com/&#34;&gt;https://svn.wzuup.com/&lt;/a&gt;&lt;/h1&gt;

&lt;p&gt;server {
  listen               443;
  ssl                  on;
  ssl_certificate      wzuup.crt;
  ssl_certificate_key  wzuup.key;&lt;/p&gt;

&lt;p&gt;server_name  svn.wzuup.com;
  access_log   logs/svn.access.log;&lt;/p&gt;

&lt;p&gt;auth_basic    &amp;ldquo;Wzuup Subversion&amp;rdquo;;
  auth_basic_user_file  htpasswd;&lt;/p&gt;

&lt;p&gt;location /wzuup {
    proxy_pass      &lt;a href=&#34;http://127.0.0.1:9000&#34;&gt;http://127.0.0.1:9000&lt;/a&gt;;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;if ($http_destination ~ &amp;quot;^http://(.+)&amp;quot;) {
  rewrite  ^(.*)$  https://$1 permanent;
}

proxy_set_header  X-Real-IP  $remote_addr;
proxy_set_header  X-Forwarded-For $proxy_add_x_forwarded_for;
proxy_set_header  X_FORWARDED_PROTO https;
proxy_set_header Host $http_host;
proxy_redirect false;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;}
}
{% endhighlight %}&lt;/p&gt;

&lt;p&gt;Done!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Create init.d script for Nginx</title>
      <link>http://blindgaenger.net/articles/2008-07-13-create-init.d-script-for-nginx/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://blindgaenger.net/articles/2008-07-13-create-init.d-script-for-nginx/</guid>
      <description>

&lt;p&gt;Copy the attached file attachment:nginx.init.d where it belongs
{{bash
$ sudo cp nginx.init.d /etc/init.d/nginx
$ sudo chmod +x /etc/init.d/nginx
}}&lt;/p&gt;

&lt;p&gt;Add it to the default run levels.
{{bash
$ sudo /usr/sbin/update-rc.d -f nginx defaults
Adding system startup for /etc/init.d/nginx &amp;hellip;
   /etc/rc0.d/K20nginx -&amp;gt; ../init.d/nginx
   /etc/rc1.d/K20nginx -&amp;gt; ../init.d/nginx
   /etc/rc6.d/K20nginx -&amp;gt; ../init.d/nginx
   /etc/rc2.d/S20nginx -&amp;gt; ../init.d/nginx
   /etc/rc3.d/S20nginx -&amp;gt; ../init.d/nginx
   /etc/rc4.d/S20nginx -&amp;gt; ../init.d/nginx
   /etc/rc5.d/S20nginx -&amp;gt; ../init.d/nginx
}}&lt;/p&gt;

&lt;p&gt;Start Server
{{bash
$ sudo /etc/init.d/nginx start
Starting nginx: nginx.
}}&lt;/p&gt;

&lt;p&gt;Restart server
Works only if the server is already running
{{bash
$ sudo /etc/init.d/nginx restart
Restarting nginx: nginx.
}}&lt;/p&gt;

&lt;p&gt;Reload configuration
{{bash
$ sudo /etc/init.d/nginx reload
Reloading nginx configuration: nginx.
}}&lt;/p&gt;

&lt;p&gt;Stop server
{{bash
$ sudo /etc/init.d/nginx stop
Stopping nginx: nginx.
}}&lt;/p&gt;

&lt;h1 id=&#34;links:3811ae9b59b4989fe565aa835f4ed2f6&#34;&gt;Links&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://articles.slicehost.com/2007/10/17/ubuntu-lts-adding-an-nginx-init-script&#34;&gt;Ubuntu LTS - adding an nginx init script&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Generate SSL certificate</title>
      <link>http://blindgaenger.net/articles/2008-07-13-generate-ssl-certificate/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://blindgaenger.net/articles/2008-07-13-generate-ssl-certificate/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;http://www.akadia.com/services/ssh_test_certificate.html&#34;&gt;http://www.akadia.com/services/ssh_test_certificate.html&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;generate-a-complex-pass-phrase:d8a21bf4e076ac0970a161f0ef73b331&#34;&gt;Generate a complex pass-phrase.&lt;/h1&gt;

&lt;p&gt;In the following it&amp;rsquo;s shown as XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX.&lt;/p&gt;

&lt;h1 id=&#34;generate-a-csr-certificate-signing-request:d8a21bf4e076ac0970a161f0ef73b331&#34;&gt;Generate a CSR (Certificate Signing Request)&lt;/h1&gt;

&lt;p&gt;{% highlight bash %}
$ openssl genrsa -des3 -out wzuup.key 1024
Generating RSA private key, 1024 bit long modulus
&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;.++++++
&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;++++++
e is 65537 (0x10001)
Enter pass phrase for cert.key:
Verifying - Enter pass phrase for wzuup.key:XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
{% endhighlight %}&lt;/p&gt;

&lt;h1 id=&#34;generate-a-csr-certificate-signing-request-1:d8a21bf4e076ac0970a161f0ef73b331&#34;&gt;Generate a CSR (Certificate Signing Request)&lt;/h1&gt;

&lt;p&gt;{% highlight bash %}
$ sudo openssl req -new -key wzuup.key -out wzuup.csr
Enter pass phrase for wzuup.key:XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
You are about to be asked to enter information that will be incorporated
into your certificate request.
What you are about to enter is what is called a Distinguished Name or a DN.
There are quite a few fields but you can leave some blank
For some fields there will be a default value,&lt;/p&gt;

&lt;h2 id=&#34;if-you-enter-the-field-will-be-left-blank:d8a21bf4e076ac0970a161f0ef73b331&#34;&gt;If you enter &amp;lsquo;.&amp;rsquo;, the field will be left blank.&lt;/h2&gt;

&lt;p&gt;Country Name (2 letter code) [AU]:DE
State or Province Name (full name) [Some-State]:Baden-Württemberg
Locality Name (eg, city) []:Karlsruhe
Organization Name (eg, company) [Internet Widgits Pty Ltd]:WZUUP.de
Organizational Unit Name (eg, section) []:
Common Name (eg, YOUR name) []:www.wzuup.de
Email Address []:kontakt@wzuup.de&lt;/p&gt;

&lt;p&gt;Please enter the following &amp;lsquo;extra&amp;rsquo; attributes
to be sent with your certificate request
A challenge password []:
An optional company name []:
{% endhighlight %}&lt;/p&gt;

&lt;h1 id=&#34;remove-passphrase-from-key:d8a21bf4e076ac0970a161f0ef73b331&#34;&gt;Remove Passphrase from Key&lt;/h1&gt;

&lt;p&gt;{% highlight bash %}
$ sudo cp wzuup.key wzuup.key.org
$ sudo openssl rsa -in wzuup.key.org -out wzuup.key
Enter pass phrase for wzuup.key.org:XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
writing RSA key
{% endhighlight %}&lt;/p&gt;

&lt;h1 id=&#34;self-sign-certificate:d8a21bf4e076ac0970a161f0ef73b331&#34;&gt;Self-sign certificate&lt;/h1&gt;

&lt;p&gt;Create a self-signed certificate, which is valid to for 365 days.
So it will not officially be cerificated by the certification authority.
The request is useless for self-signed certificates.&lt;/p&gt;

&lt;p&gt;{% highlight bash %}
$ sudo openssl x509 -req -days 365 -signkey wzuup.key -in wzuup.csr -out wzuup.crt
Signature ok
subject=/C=DE/ST=Baden-W\xC3\xBCrttemberg/L=Karlsruhe/O=WZUUP.de/CN=www.wzuup.de/emailAddress=kontakt@wzuup.de
Getting Private key
{% endhighlight %}&lt;/p&gt;

&lt;h1 id=&#34;use-the-certificate:d8a21bf4e076ac0970a161f0ef73b331&#34;&gt;Use the certificate&lt;/h1&gt;

&lt;p&gt;Now you have four files:
* &lt;code&gt;wzuup.key.org&lt;/code&gt;: the certificate key with passphrase
* &lt;code&gt;wzuup.key&lt;/code&gt;: the certificate key without passphrase
* &lt;code&gt;wzuup.csr&lt;/code&gt;: the request for the certificate
* &lt;code&gt;wzuup.crt&lt;/code&gt;: the self-signed certificate&lt;/p&gt;

&lt;p&gt;But only upload and use &lt;code&gt;wzuup.key&lt;/code&gt; and &lt;code&gt;wzuup.crt&lt;/code&gt; in your applications.&lt;/p&gt;

&lt;p&gt;Done!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Install MySQL and native MySQL driver for Ruby</title>
      <link>http://blindgaenger.net/articles/2008-07-12-install-mysql-and-native-mysql-driver-for-ruby/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://blindgaenger.net/articles/2008-07-12-install-mysql-and-native-mysql-driver-for-ruby/</guid>
      <description>

&lt;h1 id=&#34;mysql-installation:a28cf0bf75fb9c34da84e47e96ff6692&#34;&gt;MySQL Installation&lt;/h1&gt;

&lt;p&gt;Linux is pretty straight forward, so install with &lt;code&gt;apt-get&lt;/code&gt; as usual.
{{bash
$ sudo apt-get install mysql mysql-client mysql-server
}}&lt;/p&gt;

&lt;p&gt;For the developers on Windows, go to the &lt;a href=&#34;http://dev.mysql.com/downloads/mysql/5.0.html&#34;&gt;MySQL Homepage&lt;/a&gt;.
Scroll down to &lt;code&gt;Windows downloads&lt;/code&gt; and download the &lt;code&gt;Windows ZIP/Setup.EXE (x86)&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;Follow the setup instructions.&lt;/p&gt;

&lt;h1 id=&#34;building-native-mysql-driver-for-ruby:a28cf0bf75fb9c34da84e47e96ff6692&#34;&gt;Building native MySQL driver for Ruby&lt;/h1&gt;

&lt;p&gt;It&amp;rsquo;s much faster and more secure to use a native database driver to MySQL.
Otherwise Ruby will use its internal default driver.&lt;/p&gt;

&lt;p&gt;So install the Ruby binding for MySQL Server:
{{bash
$ sudo apt-get install libmysql-ruby
Reading Package Lists&amp;hellip; Done
Building Dependency Tree&amp;hellip; Done
0 upgraded, 0 newly installed, 1 reinstalled, 0 to remove and 50 not upgraded.
Need to get 0B/4984B of archives.
After unpacking 0B of additional disk space will be used.
Do you want to continue? &lt;a href=&#34;Reading database ... 40083 files and directories currently installed.&#34;&gt;Y/n&lt;/a&gt;
Preparing to replace libmysql-ruby 2.7.1-1 (using &amp;hellip;/libmysql-ruby_2.7.1-1_all.deb) &amp;hellip;
Unpacking replacement libmysql-ruby &amp;hellip;
Setting up libmysql-ruby (2.7.1-1) &amp;hellip;
}}&lt;/p&gt;

&lt;p&gt;Now try to install the gem for the mysql driver. It builds the native driver
against the MySQL binding.&lt;/p&gt;

&lt;p&gt;If you miss the packages you may see something like this:
{{bash
$ sudo gem install mysql
Building native extensions.  This could take a while&amp;hellip;
ERROR:  Error installing mysql:
    ERROR: Failed to build gem native extension.&lt;/p&gt;

&lt;p&gt;/usr/local/bin/ruby extconf.rb install mysql
checking for mysql_query() in -lmysqlclient&amp;hellip; no
checking for main() in -lm&amp;hellip; yes
checking for mysql_query() in -lmysqlclient&amp;hellip; no
checking for main() in -lz&amp;hellip; yes
checking for mysql_query() in -lmysqlclient&amp;hellip; no
checking for main() in -lsocket&amp;hellip; no
checking for mysql_query() in -lmysqlclient&amp;hellip; no
checking for main() in -lnsl&amp;hellip; yes
checking for mysql_query() in -lmysqlclient&amp;hellip; no
* extconf.rb failed *
Could not create Makefile due to some reason, probably lack of
necessary libraries and/or headers.  Check the mkmf.log file for more
details.  You may need configuration options.&lt;/p&gt;

&lt;p&gt;Provided configuration options:
    &amp;ndash;with-opt-dir
    &amp;ndash;without-opt-dir
    …
    &amp;ndash;without-mysqlclientlib&lt;/p&gt;

&lt;p&gt;Gem files will remain installed in /usr/local/lib/ruby/gems/1.8/gems/mysql-2.7 for inspection.
Results logged to /usr/local/lib/ruby/gems/1.8/gems/mysql-2.7/gem_make.out
}}&lt;/p&gt;

&lt;p&gt;If the error above occures, you need to install the development packages, too.
{{bash
$ sudo apt-get install libmysqlclient15-dev
}}&lt;/p&gt;

&lt;p&gt;Now the mysql gem should work and the native driver is available. It&amp;rsquo;s
automatically used as default MySQL driver, for example in all rails apps.
{{bash
$ sudo gem install mysql
Building native extensions.  This could take a while&amp;hellip;
Successfully installed mysql-2.7
1 gem installed
}}&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Install and use sendmail</title>
      <link>http://blindgaenger.net/articles/2008-07-16-install-and-use-sendmail/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://blindgaenger.net/articles/2008-07-16-install-and-use-sendmail/</guid>
      <description>

&lt;h1 id=&#34;install:55c709c304f6b7388898021b70ef03df&#34;&gt;Install&lt;/h1&gt;

&lt;p&gt;Install via &lt;code&gt;apt-get&lt;/code&gt;:
{{bash
$ apt-get install make
$ apt-get install sendmail sendmail-bin
}}&lt;/p&gt;

&lt;p&gt;Send a mail from command line with &lt;code&gt;mail&lt;/code&gt;, which uses &lt;code&gt;sendmail&lt;/code&gt; for transmission.
Enter mail, end with &amp;ldquo;.&amp;rdquo; on a line by itself.
{{bash
$ mail you@home.com
Subject: Enter your subject here
And this is the body. End it with a &amp;ldquo;.&amp;rdquo; on a line by itself.
.
Cc:
}}&lt;/p&gt;

&lt;p&gt;Monitor at the log, which mails have been sent.
{{bash
$ less /var/log/mail.log
&amp;hellip;
Jul 19 13:22:48 vs184010 sendmail[8071]: alias database /etc/mail/aliases rebuilt by root
Jul 19 13:22:48 vs184010 sendmail[8071]: /etc/mail/aliases: 13 aliases, longest 10 bytes, 144 bytes total
Jul 19 13:22:49 vs184010 sm-mta[8151]: starting daemon (8.13.8): SMTP+queueing@00:10:00
Jul 19 13:25:45 vs184010 sendmail[21524]: m6JDOqDR021524: from=me@work.com, size=0, class=0, nrcpts=7, relay=root@localhost
Jul 19 13:27:49 vs184010 sm-mta[7402]: starting daemon (8.13.8): SMTP+queueing@00:10:00
Jul 19 13:28:35 vs184010 sm-mta[11380]: m6JDSZoG011380: from=&lt;a href=&#34;mailto:monit@blindgaenger.net&#34;&gt;monit@blindgaenger.net&lt;/a&gt;, size=553, class=0, nrcpts=1, msgid=&lt;a href=&#34;mailto:1216474115@vs184010.vserver.de&#34;&gt;1216474115@vs184010.vserver.de&lt;/a&gt;, proto=SMTP, daemon=MTA-v4, relay=localhost.localdomain [127.0.0.1]
Jul 19 13:28:36 vs184010 sm-mta[11383]: m6JDSZoG011380: to=&lt;a href=&#34;mailto:mail@wzuup.com&#34;&gt;mail@wzuup.com&lt;/a&gt;, delay=00:00:01, xdelay=00:00:01, mailer=esmtp, pri=120553, relay=gmail-smtp-in.l.google.com. [209.85.129.27], dsn=2.0.0, stat=Sent (OK 1216474116 13si6851157fks.6)
}}&lt;/p&gt;

&lt;h1 id=&#34;start-restart-stop:55c709c304f6b7388898021b70ef03df&#34;&gt;Start, Restart, Stop&lt;/h1&gt;

&lt;p&gt;Start
{{bash
$ sudo /etc/init.d/sendmail start
Starting Mail Transport Agent: sendmail.
}}&lt;/p&gt;

&lt;p&gt;Restart
{{bash
$ sudo /etc/init.d/sendmail restart
Restarting Transport Agent: sendmail.
}}&lt;/p&gt;

&lt;p&gt;Stop
{{bash
$ sudo /etc/init.d/sendmail stop
Stopping Mail Transport Agent: sendmail.
}}&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Monitor applications with Monit</title>
      <link>http://blindgaenger.net/articles/2008-07-15-monitor-applications-with-monit/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://blindgaenger.net/articles/2008-07-15-monitor-applications-with-monit/</guid>
      <description>

&lt;h1 id=&#34;ssh:b3a6f0243e633d32cbe9e3b79a159279&#34;&gt;SSH&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;https://www.adminlife.net/admins-helferlein/howto-monit-unter-debian-etch/&#34;&gt;HowTo: monit unter Debian Etch&lt;/a&gt;
{{bash
check process sshd with pidfile /var/run/sshd.pid
start program = &amp;ldquo;/etc/init.d/ssh start&amp;rdquo;
stop  program = &amp;ldquo;/etc/init.d/ssh stop&amp;rdquo;
if failed port 22 protocol ssh then restart
if 5 restarts within 5 cycles then timeout
}}&lt;/p&gt;

&lt;h1 id=&#34;apache:b3a6f0243e633d32cbe9e3b79a159279&#34;&gt;Apache&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;http://mmonit.com/wiki/Monit/ConfigurationExamples#apache&#34;&gt;http://mmonit.com/wiki/Monit/ConfigurationExamples#apache&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Hint:&lt;/em&gt; It is recommended to use a &amp;ldquo;token&amp;rdquo; file (an empty file) for monit to
request. That way, it is easy to filter out all the requests made by monit in
the httpd access log file. Here&amp;rsquo;s a trick shared by Marco Ermini, place the
following in httpd.conf to stop apache from loggin any requests done by monit:
{{bash
  SetEnvIf        Request_URI &amp;ldquo;^\/monit\/token$&amp;rdquo; dontlog
  CustomLog       logs/access.log common env=!dontlog
}}&lt;/p&gt;

&lt;p&gt;In some cases init scripts for apache and apache-ssl are separated (e.g. Debian Linux).
{{bash
 check process apache with pidfile /opt/apache_misc/logs/httpd.pid
   group www
   start program = &amp;ldquo;/etc/init.d/apache start&amp;rdquo;
   stop  program = &amp;ldquo;/etc/init.d/apache stop&amp;rdquo;
   if failed host 192.168.1.1 port 80
        protocol HTTP request /monit/token then restart
   if failed host 192.168.1.1 port 443 type TCPSSL
        certmd5 12-34-56-78-90-AB-CD-EF-12-34-56-78-90-AB-CD-EF
      protocol HTTP request /monit/token  then restart
   if 5 restarts within 5 cycles then timeout
   depends on apache_bin
   depends on apache_rc&lt;/p&gt;

&lt;p&gt;check file apache_bin with path /opt/apache/bin/httpd
   group www
   if failed checksum then unmonitor
   if failed permission 755 then unmonitor
   if failed uid root then unmonitor
   if failed gid root then unmonitor&lt;/p&gt;

&lt;p&gt;check file apache_rc with path /etc/init.d/apache
   group www
   if failed checksum then unmonitor
   if failed permission 755 then unmonitor
   if failed uid root then unmonitor
   if failed gid root then unmonitor
}}&lt;/p&gt;

&lt;h1 id=&#34;mongrel:b3a6f0243e633d32cbe9e3b79a159279&#34;&gt;Mongrel&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;http://www.igvita.com/2006/11/07/monit-makes-mongrel-play-nice/&#34;&gt;This little snippet&lt;/a&gt;
was posted by the (let&amp;rsquo;s say all-round guru) &lt;a href=&#34;http://www.igvita.com/&#34;&gt;Ilya Grigorik&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;{{bash&lt;/p&gt;

&lt;h5 id=&#34;mongrel-8010:b3a6f0243e633d32cbe9e3b79a159279&#34;&gt;mongrel 8010&lt;/h5&gt;

&lt;p&gt;check process mongrel-8010 with pidfile /home/user/rails/current/log/mongrel.8010.pid
    start program = &amp;ldquo;/usr/local/bin/ruby /usr/local/bin/mongrel_rails start -d -e production -p 8010 -a 127.0.0.1 -P /home/user/current/log/mongrel.8010.pid -c /home/user/rails/current&amp;rdquo;
    stop program  = &amp;ldquo;/usr/local/bin/ruby /usr/local/bin/mongrel_rails stop -P /home/user/current/log/mongrel.8010.pid&amp;rdquo;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;if totalmem is greater than 60.0 MB for 5 cycles then restart       # eating up memory?
if cpu is greater than 50% for 2 cycles then alert                  # send an email to admin
if cpu is greater than 80% for 3 cycles then restart                # hung process?
if loadavg(5min) greater than 10 for 8 cycles then restart          # bad, bad, bad
if 3 restarts within 5 cycles then timeout                         # something is wrong, call the sys-admin

if failed port 8010 protocol http                   # check for response
    with timeout 10 seconds
    then restart
group mongrel
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;}}&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Put Rails behind HTTPS</title>
      <link>http://blindgaenger.net/articles/2008-07-13-put-rails-behind-https/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://blindgaenger.net/articles/2008-07-13-put-rails-behind-https/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://benr75.com/2008/04/09/force-ssl-for-a-rails-application-with-an-nginx-proxy&#34;&gt;http://benr75.com/2008/04/09/force-ssl-for-a-rails-application-with-an-nginx-proxy&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Set &lt;code&gt;X_FORWARDED_PROTO&lt;/code&gt; in &lt;code&gt;nginx.conf&lt;/code&gt;:
{% highlight bash %}
server {
  &amp;hellip;
  location {
    &amp;hellip;
    proxy_set_header X_FORWARDED_PROTO https;
    &amp;hellip;
  }
&amp;hellip;
}
{% endhighlight %}&lt;/p&gt;

&lt;p&gt;Rails will figure out from these lines in &lt;code&gt;request.rb&lt;/code&gt;:
{% highlight ruby %}
def ssl?
      @env[&amp;lsquo;HTTPS&amp;rsquo;] == &amp;lsquo;on&amp;rsquo; || @env[&amp;lsquo;HTTP_X_FORWARDED_PROTO&amp;rsquo;] == &amp;lsquo;https&amp;rsquo;
end
{% endhighlight %}&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Setup MySQL database for Rails</title>
      <link>http://blindgaenger.net/articles/2008-07-12-setup-mysql-database-for-rails/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://blindgaenger.net/articles/2008-07-12-setup-mysql-database-for-rails/</guid>
      <description>&lt;p&gt;Login to the MySQL instance.
{{bash
$ sudo mysql -uroot -p
Enter password:
Welcome to the MySQL monitor.  Commands end with ; or \g.
Your MySQL connection id is 174
Server version: 5.0.32-Debian_7etch5-log Debian etch distribution&lt;/p&gt;

&lt;p&gt;Type &amp;lsquo;help;&amp;rsquo; or &amp;lsquo;\h&amp;rsquo; for help. Type &amp;lsquo;\c&amp;rsquo; to clear the buffer.&lt;/p&gt;

&lt;p&gt;mysql&amp;gt;
}}&lt;/p&gt;

&lt;p&gt;Create the database for the rails app.
{{bash
mysql&amp;gt; CREATE DATABASE IF NOT EXISTS wzuup_production;
}}&lt;/p&gt;

&lt;p&gt;Create a user and give him a password.
{{bash
mysql&amp;gt; GRANT ALL PRIVILEGES ON wzuup_production.*
    -&amp;gt; TO &amp;ldquo;wzuup_username&amp;rdquo;@&amp;ldquo;localhost&amp;rdquo;
    -&amp;gt; IDENTIFIED BY &amp;ldquo;wzuup_password&amp;rdquo;;
}}&lt;/p&gt;

&lt;p&gt;Type &lt;em&gt;quit&lt;/em&gt; or press CTRL+D to quit MySQL.
{{bash
mysql&amp;gt; quit
Bye
}}&lt;/p&gt;

&lt;p&gt;Change the RAILS_PROJECT/config/attachment:database.yml to have the same user and password as in the SQL statement above.
{{bash
production:
  adapter: mysql
  encoding: utf8
  database: wzuup_production
  username: wzuup_username
  password: wzuup_password
  socket: /var/run/mysqld/mysqld.sock
}}&lt;/p&gt;

&lt;p&gt;Create the schema in the created database using the migrations.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Important:&lt;/em&gt; Set the environment to production!
{{bash
$ rake RAILS_ENV=production db:migrate
}}&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Setup Redmine</title>
      <link>http://blindgaenger.net/articles/2008-07-16-setup-redmine/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://blindgaenger.net/articles/2008-07-16-setup-redmine/</guid>
      <description>&lt;p&gt;Create database and user.
{{sql
CREATE DATABASE IF NOT EXISTS redmine character SET utf8;
GRANT ALL PRIVILEGES ON redmine.*
  TO &amp;ldquo;redmine_username&amp;rdquo;@&amp;ldquo;localhost&amp;rdquo;
  IDENTIFIED BY &amp;ldquo;redmine_password&amp;rdquo;;
}}&lt;/p&gt;

&lt;p&gt;Make sure the native MySQL driver is installed.
Otherwise the application will fail to serve requests.
{{bash
$ sudo gem install mysql
}}&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s necessary to set &amp;lsquo;encoding&amp;rsquo; and &amp;lsquo;socket&amp;rsquo; in database.yml.
{{yaml
production:
  adapter: mysql
  database: redmine
  host: localhost
  username: redmine_username
  password: redmine_password
  encoding: utf8
  socket: /var/run/mysqld/mysqld.sock
}}&lt;/p&gt;

&lt;p&gt;Create schema in database.
{{bash
$ rake db:migrate RAILS_ENV=&amp;ldquo;production&amp;rdquo;
}}&lt;/p&gt;

&lt;p&gt;Load some default data in the database.
{{bash
$ rake redmine:load_default_data RAILS_ENV=&amp;ldquo;production&amp;rdquo;
}}&lt;/p&gt;

&lt;p&gt;Change user and privileges.
{{bash
$ sudo chown -R redmine:redmine files log tmp
$ sudo chmod -R 755 files log tmp
}}&lt;/p&gt;

&lt;p&gt;Setup mongrel.
&lt;em&gt;Important:&lt;/em&gt; Check the port, here it&amp;rsquo;s 8010!
{{bash
$ mongrel_rails cluster::configure -a 127.0.0.1 -p 8010 -N 1 -e production -c /var/rails/redmine
}}&lt;/p&gt;

&lt;p&gt;Login the first time.
* username: admin
* password: admin&lt;/p&gt;

&lt;p&gt;Done.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Start Monit</title>
      <link>http://blindgaenger.net/articles/2008-07-15-start-monit/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://blindgaenger.net/articles/2008-07-15-start-monit/</guid>
      <description>

&lt;p&gt;Start monit in interactive mode.
{{bash
$ vs184010:~# monit -I
Starting monit daemon with http interface at [localhost:2812]
Starting monit HTTP server at [localhost:2812]
monit HTTP server started
Monit started
}}&lt;/p&gt;

&lt;p&gt;To stop press &lt;code&gt;CTRL+C&lt;/code&gt;
{{bash
Shutting down monit HTTP server
monit HTTP server stopped
monit daemon with pid [21987] killed
Monit stopped
$
}}&lt;/p&gt;

&lt;p&gt;Inspect the log at &lt;code&gt;/var/log/monit&lt;/code&gt;
{{bash
$ less /var/log/monit
[UTC Jul 19 13:29:29] info     : Starting monit daemon with http interface at [localhost:7000]
[UTC Jul 19 13:29:29] info     : Starting monit HTTP server at [localhost:7000]
[UTC Jul 19 13:29:29] info     : monit HTTP server started
[UTC Jul 19 13:29:29] info     : Monit started
[UTC Jul 19 13:30:29] info     : Monit has not changed
[UTC Jul 19 13:37:10] info     : Shutting down monit HTTP server
[UTC Jul 19 13:37:10] info     : monit HTTP server stopped
[UTC Jul 19 13:37:10] info     : monit daemon with pid [15731] killed
[UTC Jul 19 13:37:10] info     : Monit stopped
}}&lt;/p&gt;

&lt;h1 id=&#34;notes:d0610d013b990c549c8d4a1b7be7f8a5&#34;&gt;Notes&lt;/h1&gt;

&lt;p&gt;Another way is to start monit in the background.
{{bash
$ monit
}}&lt;/p&gt;

&lt;p&gt;But to stop it, you need to kill it.
{{bash
$ kill &lt;code&gt;cat /var/run/monit.pid&lt;/code&gt;
}}&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Start Nginx</title>
      <link>http://blindgaenger.net/articles/2008-07-13-start-nginx/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://blindgaenger.net/articles/2008-07-13-start-nginx/</guid>
      <description>

&lt;p&gt;Check it&amp;rsquo;s not running.
{% highlight bash %}
$ curl localhost
curl: (7) couldn&amp;rsquo;t connect to host
{% endhighlight %}&lt;/p&gt;

&lt;p&gt;Start it directly (without init.d script)
{% highlight bash %}
$ sudo /usr/local/nginx/sbin/nginx
{% endhighlight %}&lt;/p&gt;

&lt;p&gt;Check it&amp;rsquo;s running in the background.
{% highlight bash %}
$ curl localhost
&lt;html&gt;
&lt;head&gt;
&lt;title&gt;Welcome to nginx!&lt;/title&gt;
&lt;/head&gt;
&lt;body bgcolor=&#34;white&#34; text=&#34;black&#34;&gt;
&lt;center&gt;&lt;h1&gt;Welcome to nginx!&lt;/h1&gt;&lt;/center&gt;
&lt;/body&gt;
&lt;/html&gt;
{% endhighlight %}&lt;/p&gt;

&lt;p&gt;Stop/kill the server again.
{% highlight bash %}
$ sudo kill &lt;code&gt;cat /usr/local/nginx/logs/nginx.pid&lt;/code&gt;
{% endhighlight %}&lt;/p&gt;

&lt;p&gt;Check it&amp;rsquo;s not running.
{% highlight bash %}
$ curl localhost
curl: (7) couldn&amp;rsquo;t connect to host
{% endhighlight %}&lt;/p&gt;

&lt;h1 id=&#34;notes:f524ac6e4521c2d1c2dfc12b7484c123&#34;&gt;Notes&lt;/h1&gt;

&lt;p&gt;If the server needs a pass phrase on start up, see
&lt;a href=&#34;http://blindgaenger.net/generate-ssl-certificate&#34;&gt;Generate SSL certificate&lt;/a&gt; how to avoid this.
{{bash
$ sudo /etc/init.d/nginx start
Starting nginx: Enter PEM pass phrase:XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
nginx.
}}&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>