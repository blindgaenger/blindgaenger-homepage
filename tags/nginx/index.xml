<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Nginx on blindgaenger</title>
    <link>http://blindgaenger.net/tags/nginx/</link>
    <description>Recent content in Nginx on blindgaenger</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="http://blindgaenger.net/tags/nginx/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Compile Nginx</title>
      <link>http://blindgaenger.net/articles/2008-07-13-compile-nginx/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://blindgaenger.net/articles/2008-07-13-compile-nginx/</guid>
      <description>

&lt;p&gt;Download and unzip the sources.
{{bash
$ cd /tmp
$ wget &lt;a href=&#34;http://sysoev.ru/nginx/nginx-0.7.6.tar.gz&#34;&gt;http://sysoev.ru/nginx/nginx-0.7.6.tar.gz&lt;/a&gt;
$ tar -xzvf nginx-0.7.6.tar.gz
$ cd nginx-0.7.6/
}}&lt;/p&gt;

&lt;p&gt;Make sure the OpenSSL is available, needed for &lt;code&gt;--with-http_ssl_module&lt;/code&gt;
{{bash
$ sudo apt-get install libssl-dev
}}&lt;/p&gt;

&lt;p&gt;Configure with SSL and WebDAV module enabled
&lt;a href=&#34;http://wiki.codemongers.com/NginxInstallOptions&#34;&gt;http://wiki.codemongers.com/NginxInstallOptions&lt;/a&gt;
{{bash
$ ./configure &amp;ndash;with-http_ssl_module &amp;ndash;with-http_dav_module
&amp;hellip;
Configuration summary
  + using system PCRE library
  + using system OpenSSL library
  + md5 library is not used
  + sha1 library is not used
  + using system zlib library&lt;/p&gt;

&lt;p&gt;nginx path prefix: &amp;ldquo;/usr/local/nginx&amp;rdquo;
  nginx binary file: &amp;ldquo;/usr/local/nginx/sbin/nginx&amp;rdquo;
  nginx configuration prefix: &amp;ldquo;/usr/local/nginx/conf&amp;rdquo;
  nginx configuration file: &amp;ldquo;/usr/local/nginx/conf/nginx.conf&amp;rdquo;
  nginx pid file: &amp;ldquo;/usr/local/nginx/logs/nginx.pid&amp;rdquo;
  nginx error log file: &amp;ldquo;/usr/local/nginx/logs/error.log&amp;rdquo;
  nginx http access log file: &amp;ldquo;/usr/local/nginx/logs/access.log&amp;rdquo;
  nginx http client request body temporary files: &amp;ldquo;/usr/local/nginx/client_body_temp&amp;rdquo;
  nginx http proxy temporary files: &amp;ldquo;/usr/local/nginx/proxy_temp&amp;rdquo;
  nginx http fastcgi temporary files: &amp;ldquo;/usr/local/nginx/fastcgi_temp&amp;rdquo;
}}&lt;/p&gt;

&lt;p&gt;Build and install it.
{{bash
$ make
$ sudo make install
&amp;hellip;
}}&lt;/p&gt;

&lt;p&gt;Done!&lt;/p&gt;

&lt;h1 id=&#34;modules:1b24ca547d02c2cfa67a1074f699e88a&#34;&gt;Modules&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://wiki.nginx.org/NginxModules&#34;&gt;http://wiki.nginx.org/NginxModules&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://wiki.nginx.org/NginxHttpAuthBasicModule&#34;&gt;http://wiki.nginx.org/NginxHttpAuthBasicModule&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://wiki.nginx.org/NginxHttpProxyModule&#34;&gt;http://wiki.nginx.org/NginxHttpProxyModule&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://wiki.nginx.org/NginxHttpSslModule&#34;&gt;http://wiki.nginx.org/NginxHttpSslModule&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;links:1b24ca547d02c2cfa67a1074f699e88a&#34;&gt;Links&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://articles.slicehost.com/2007/10/16/ubuntu-lts-installing-nginx&#34;&gt;Ubuntu LTS - installing nginx&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Configure Nginx</title>
      <link>http://blindgaenger.net/articles/2008-07-13-configure-nginx/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://blindgaenger.net/articles/2008-07-13-configure-nginx/</guid>
      <description>

&lt;p&gt;Note that these config worked well for me. Please check your needs and read the
official documentation about &lt;a href=&#34;http://wiki.nginx.org/NginxConfiguration&#34;&gt;Nginx Configuration&lt;/a&gt;
befor using it for your projects.&lt;/p&gt;

&lt;p&gt;If you followed the instructions described in my previous post
&lt;a href=&#34;compile-nginx.html&#34;&gt;Compile Nginx&lt;/a&gt;, then the configuration is located in
&lt;code&gt;/usr/local/nginx/conf/nginx.conf&lt;/code&gt;.&lt;/p&gt;

&lt;h1 id=&#34;configuration:f51bd01af491830d509b471a226a4609&#34;&gt;Configuration&lt;/h1&gt;

&lt;p&gt;Basically it looks like this. The missing server configs are described in detail
below.&lt;/p&gt;

&lt;p&gt;{% highlight bash %}&lt;/p&gt;

&lt;h1 id=&#34;user-and-group-to-run-as:f51bd01af491830d509b471a226a4609&#34;&gt;user and group to run as&lt;/h1&gt;

&lt;p&gt;#user   nginx nginx;&lt;/p&gt;

&lt;p&gt;worker_processes  1;
events {
  # Number of worker connections. 1024 is a good default
  worker_connections  1024;
}&lt;/p&gt;

&lt;p&gt;http {
  include mime.types;
  default_type application/octet-stream;&lt;/p&gt;

&lt;p&gt;access_log logs/access.log;
  error_log logs/error.log debug;&lt;/p&gt;

&lt;p&gt;# no sendfile on OSX
  sendfile on;&lt;/p&gt;

&lt;p&gt;# These are good default values.
  tcp_nopush on;
  tcp_nodelay off;&lt;/p&gt;

&lt;p&gt;# output compression saves bandwidth
  gzip on;
  gzip_http_version 1.0;
  gzip_comp_level 2;
  gzip_proxied any;
  gzip_types text/plain text/html text/css application/x-javascript text/xml application/xml application/xml+rss text/javascript;&lt;/p&gt;

&lt;p&gt;##################################
  # include your server configs here
  ##################################&lt;/p&gt;

&lt;p&gt;}
{% endhighlight %}&lt;/p&gt;

&lt;h1 id=&#34;static-pages:f51bd01af491830d509b471a226a4609&#34;&gt;Static pages&lt;/h1&gt;

&lt;p&gt;This server config served our static &amp;ldquo;coming soon&amp;rdquo; page. Actually the page was
hosted somewhere in the internet at &lt;code&gt;http://wzuup.de&lt;/code&gt;. What I needed to do is to
redirect the content to &lt;code&gt;wzuup.com&lt;/code&gt;. Users entering &lt;code&gt;www.wzuup.com&lt;/code&gt; will be
permanently rewritten to &lt;code&gt;wzuup.com&lt;/code&gt;. Pretty simple if you try to read it!&lt;/p&gt;

&lt;p&gt;{% highlight bash %}
##################################&lt;/p&gt;

&lt;h1 id=&#34;http-wzuup-com:f51bd01af491830d509b471a226a4609&#34;&gt;&lt;a href=&#34;http://wzuup.com&#34;&gt;http://wzuup.com&lt;/a&gt;&lt;/h1&gt;

&lt;p&gt;server {
  listen       80;
  server_name  wzuup.com www.wzuup.com;
  access_log   logs/wzuup.access.log;&lt;/p&gt;

&lt;p&gt;# www.wzuup.com =&amp;gt; wzuup.com
  if ($host ~* &amp;ldquo;www&amp;rdquo;) {
    rewrite ^(.*)$ &lt;a href=&#34;http://wzuup.com$1&#34;&gt;http://wzuup.com$1&lt;/a&gt; permanent;
    break;
  }&lt;/p&gt;

&lt;p&gt;location / {
    # redirect the request
    # so &lt;a href=&#34;http://wzuup.de/&#34;&gt;http://wzuup.de/&lt;/a&gt; will appear at &lt;a href=&#34;http://wzuup.com/&#34;&gt;http://wzuup.com/&lt;/a&gt;
    proxy_pass        &lt;a href=&#34;http://wzuup.de&#34;&gt;http://wzuup.de&lt;/a&gt;;
    proxy_set_header  X-Real-IP  $remote_addr;
  }&lt;/p&gt;

&lt;p&gt;error_page   500 502 503 504  /50x.html;
  location = /50x.html {
    root   html;
  }
}
{% endhighlight %}&lt;/p&gt;

&lt;h1 id=&#34;rails-application:f51bd01af491830d509b471a226a4609&#34;&gt;Rails application&lt;/h1&gt;

&lt;p&gt;At staging we share our last stable build with the rest of the team or some
chosen people. That&amp;rsquo;s why it uses &lt;code&gt;ssl&lt;/code&gt; and &lt;code&gt;auth_basic&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The interesting part is the &lt;code&gt;mongrel_staging&lt;/code&gt; section. Mongrel instance on
ports 8001 and 8001 are serving our Rails app. Nginx tries to server the
requested files from its &lt;code&gt;root&lt;/code&gt; dir (see config). But if the filename does not
exist (&lt;code&gt;if (!-f $request_filename)&lt;/code&gt;) then the request is passed to one mongrel.&lt;/p&gt;

&lt;p&gt;Of course, you can put multiple mongrel instances in the &lt;code&gt;upstream&lt;/code&gt; section. For
Rails projects register all servers of a specific cluster. Nginx tries to load
balance them. (&lt;a href=&#34;http://wiki.nginx.org/NginxChsHttpUpstreamModule&#34;&gt;http://wiki.nginx.org/NginxChsHttpUpstreamModule&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;{% highlight bash %}
##################################&lt;/p&gt;

&lt;h1 id=&#34;https-staging-wzuup-com:f51bd01af491830d509b471a226a4609&#34;&gt;&lt;a href=&#34;https://staging.wzuup.com&#34;&gt;https://staging.wzuup.com&lt;/a&gt;&lt;/h1&gt;

&lt;p&gt;upstream mongrel_staging {
  server 127.0.0.1:8000;
  server 127.0.0.1:8001;
}&lt;/p&gt;

&lt;p&gt;server {
  listen               443;
  ssl                  on;
  ssl_certificate      wzuup.crt;
  ssl_certificate_key  wzuup.key;&lt;/p&gt;

&lt;p&gt;server_name  staging.wzuup.com staging.blindgaenger.net;
  root   /var/rails/wzuup/public;
  access_log  logs/staging.access.log;&lt;/p&gt;

&lt;p&gt;auth_basic            &amp;ldquo;Wzuup Staging&amp;rdquo;;
  auth_basic_user_file  htpasswd;&lt;/p&gt;

&lt;p&gt;# this rewrites all the requests to the maintenance.html
  # page if it exists in the doc root. This is for capistrano&amp;rsquo;s
  # disable web task
  if (-f $document_root/maintenance.html){
    rewrite  ^(.*)$  /maintenance.html last;
    break;
  }&lt;/p&gt;

&lt;p&gt;location / {
    proxy_set_header  X-Real-IP  $remote_addr;
    proxy_set_header  X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header  X_FORWARDED_PROTO https;
    proxy_set_header Host $http_host;
    proxy_redirect false;
    if (-f $request_filename/index.html) {
      rewrite (.&lt;em&gt;) $1/index.html break;
    }
    if (-f $request_filename.html) {
      rewrite (.&lt;/em&gt;) $1.html break;
    }
    if (!-f $request_filename) {
      proxy_pass &lt;a href=&#34;http://mongrel_staging&#34;&gt;http://mongrel_staging&lt;/a&gt;;
      break;
    }
  }&lt;/p&gt;

&lt;p&gt;index  index.html index.htm;
  error_page   500 502 503 504  /50x.html;
  location = /50x.html {
    root   html;
  }
}
{% endhighlight %}&lt;/p&gt;

&lt;h1 id=&#34;subversion:f51bd01af491830d509b471a226a4609&#34;&gt;Subversion&lt;/h1&gt;

&lt;p&gt;Unfortunately Nginx can not be used to fully serve a SVN repository, because the
dav module doesn&amp;rsquo;t support PROPFIND (see &lt;a href=&#34;http://www.ruby-forum.com/topic/140841&#34;&gt;http://www.ruby-forum.com/topic/140841&lt;/a&gt;).
So currently the best way is to use Apache for SVN and serve it via Nginx.&lt;/p&gt;

&lt;p&gt;{% highlight bash %}
##################################&lt;/p&gt;

&lt;h1 id=&#34;https-svn-wzuup-com:f51bd01af491830d509b471a226a4609&#34;&gt;&lt;a href=&#34;https://svn.wzuup.com/&#34;&gt;https://svn.wzuup.com/&lt;/a&gt;&lt;/h1&gt;

&lt;p&gt;server {
  listen               443;
  ssl                  on;
  ssl_certificate      wzuup.crt;
  ssl_certificate_key  wzuup.key;&lt;/p&gt;

&lt;p&gt;server_name  svn.wzuup.com;
  access_log   logs/svn.access.log;&lt;/p&gt;

&lt;p&gt;auth_basic    &amp;ldquo;Wzuup Subversion&amp;rdquo;;
  auth_basic_user_file  htpasswd;&lt;/p&gt;

&lt;p&gt;location /wzuup {
    proxy_pass      &lt;a href=&#34;http://127.0.0.1:9000&#34;&gt;http://127.0.0.1:9000&lt;/a&gt;;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;if ($http_destination ~ &amp;quot;^http://(.+)&amp;quot;) {
  rewrite  ^(.*)$  https://$1 permanent;
}

proxy_set_header  X-Real-IP  $remote_addr;
proxy_set_header  X-Forwarded-For $proxy_add_x_forwarded_for;
proxy_set_header  X_FORWARDED_PROTO https;
proxy_set_header Host $http_host;
proxy_redirect false;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;}
}
{% endhighlight %}&lt;/p&gt;

&lt;p&gt;Done!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Create init.d script for Nginx</title>
      <link>http://blindgaenger.net/articles/2008-07-13-create-init.d-script-for-nginx/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://blindgaenger.net/articles/2008-07-13-create-init.d-script-for-nginx/</guid>
      <description>

&lt;p&gt;Copy the attached file attachment:nginx.init.d where it belongs
{{bash
$ sudo cp nginx.init.d /etc/init.d/nginx
$ sudo chmod +x /etc/init.d/nginx
}}&lt;/p&gt;

&lt;p&gt;Add it to the default run levels.
{{bash
$ sudo /usr/sbin/update-rc.d -f nginx defaults
Adding system startup for /etc/init.d/nginx &amp;hellip;
   /etc/rc0.d/K20nginx -&amp;gt; ../init.d/nginx
   /etc/rc1.d/K20nginx -&amp;gt; ../init.d/nginx
   /etc/rc6.d/K20nginx -&amp;gt; ../init.d/nginx
   /etc/rc2.d/S20nginx -&amp;gt; ../init.d/nginx
   /etc/rc3.d/S20nginx -&amp;gt; ../init.d/nginx
   /etc/rc4.d/S20nginx -&amp;gt; ../init.d/nginx
   /etc/rc5.d/S20nginx -&amp;gt; ../init.d/nginx
}}&lt;/p&gt;

&lt;p&gt;Start Server
{{bash
$ sudo /etc/init.d/nginx start
Starting nginx: nginx.
}}&lt;/p&gt;

&lt;p&gt;Restart server
Works only if the server is already running
{{bash
$ sudo /etc/init.d/nginx restart
Restarting nginx: nginx.
}}&lt;/p&gt;

&lt;p&gt;Reload configuration
{{bash
$ sudo /etc/init.d/nginx reload
Reloading nginx configuration: nginx.
}}&lt;/p&gt;

&lt;p&gt;Stop server
{{bash
$ sudo /etc/init.d/nginx stop
Stopping nginx: nginx.
}}&lt;/p&gt;

&lt;h1 id=&#34;links:3811ae9b59b4989fe565aa835f4ed2f6&#34;&gt;Links&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://articles.slicehost.com/2007/10/17/ubuntu-lts-adding-an-nginx-init-script&#34;&gt;Ubuntu LTS - adding an nginx init script&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Put Rails behind HTTPS</title>
      <link>http://blindgaenger.net/articles/2008-07-13-put-rails-behind-https/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://blindgaenger.net/articles/2008-07-13-put-rails-behind-https/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://benr75.com/2008/04/09/force-ssl-for-a-rails-application-with-an-nginx-proxy&#34;&gt;http://benr75.com/2008/04/09/force-ssl-for-a-rails-application-with-an-nginx-proxy&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Set &lt;code&gt;X_FORWARDED_PROTO&lt;/code&gt; in &lt;code&gt;nginx.conf&lt;/code&gt;:
{% highlight bash %}
server {
  &amp;hellip;
  location {
    &amp;hellip;
    proxy_set_header X_FORWARDED_PROTO https;
    &amp;hellip;
  }
&amp;hellip;
}
{% endhighlight %}&lt;/p&gt;

&lt;p&gt;Rails will figure out from these lines in &lt;code&gt;request.rb&lt;/code&gt;:
{% highlight ruby %}
def ssl?
      @env[&amp;lsquo;HTTPS&amp;rsquo;] == &amp;lsquo;on&amp;rsquo; || @env[&amp;lsquo;HTTP_X_FORWARDED_PROTO&amp;rsquo;] == &amp;lsquo;https&amp;rsquo;
end
{% endhighlight %}&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Start Nginx</title>
      <link>http://blindgaenger.net/articles/2008-07-13-start-nginx/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://blindgaenger.net/articles/2008-07-13-start-nginx/</guid>
      <description>

&lt;p&gt;Check it&amp;rsquo;s not running.
{% highlight bash %}
$ curl localhost
curl: (7) couldn&amp;rsquo;t connect to host
{% endhighlight %}&lt;/p&gt;

&lt;p&gt;Start it directly (without init.d script)
{% highlight bash %}
$ sudo /usr/local/nginx/sbin/nginx
{% endhighlight %}&lt;/p&gt;

&lt;p&gt;Check it&amp;rsquo;s running in the background.
{% highlight bash %}
$ curl localhost
&lt;html&gt;
&lt;head&gt;
&lt;title&gt;Welcome to nginx!&lt;/title&gt;
&lt;/head&gt;
&lt;body bgcolor=&#34;white&#34; text=&#34;black&#34;&gt;
&lt;center&gt;&lt;h1&gt;Welcome to nginx!&lt;/h1&gt;&lt;/center&gt;
&lt;/body&gt;
&lt;/html&gt;
{% endhighlight %}&lt;/p&gt;

&lt;p&gt;Stop/kill the server again.
{% highlight bash %}
$ sudo kill &lt;code&gt;cat /usr/local/nginx/logs/nginx.pid&lt;/code&gt;
{% endhighlight %}&lt;/p&gt;

&lt;p&gt;Check it&amp;rsquo;s not running.
{% highlight bash %}
$ curl localhost
curl: (7) couldn&amp;rsquo;t connect to host
{% endhighlight %}&lt;/p&gt;

&lt;h1 id=&#34;notes:f524ac6e4521c2d1c2dfc12b7484c123&#34;&gt;Notes&lt;/h1&gt;

&lt;p&gt;If the server needs a pass phrase on start up, see
&lt;a href=&#34;http://blindgaenger.net/generate-ssl-certificate&#34;&gt;Generate SSL certificate&lt;/a&gt; how to avoid this.
{{bash
$ sudo /etc/init.d/nginx start
Starting nginx: Enter PEM pass phrase:XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
nginx.
}}&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Use nginx config generator</title>
      <link>http://blindgaenger.net/articles/2008-07-13-use-nginx-config-generator/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://blindgaenger.net/articles/2008-07-13-use-nginx-config-generator/</guid>
      <description>&lt;p&gt;There is a &lt;a href=&#34;http://github.com/defunkt/nginx_config_generator&#34;&gt;Config Generator for Nginx&lt;/a&gt;
which uses YAML for configuration. It uses the same keywords (hopefully it does),
but may be easier to maintain.&lt;/p&gt;

&lt;p&gt;Install nginx_config_generator
{% highlight bash %}
$ sudo gem install nginx_config_generator
{% endhighlight %}&lt;/p&gt;

&lt;p&gt;Generate a YAML example as template
{% highlight bash %}
$ generate_nginx_config ‐‐example &amp;gt;nginx.yml
{% endhighlight %}&lt;/p&gt;

&lt;p&gt;Convert the yaml to &lt;code&gt;nginx.conf&lt;/code&gt;
{% highlight bash %}
$ generate_nginx_config nginx.yml nginx.conf
{% endhighlight %}&lt;/p&gt;

&lt;p&gt;Use &lt;code&gt;-y&lt;/code&gt; to overwrite nginx.conf if already exists
{% highlight bash %}
$ generate_nginx_config nginx.yml nginx.conf -y
{% endhighlight %}&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>