<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Github on blindgaenger</title>
    <link>http://blindgaenger.net/tags/github/</link>
    <description>Recent content in Github on blindgaenger</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="http://blindgaenger.net/tags/github/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Generate GitHub pages in a submodule</title>
      <link>http://blindgaenger.net/articles/2009-11-08%20-%20Generate%20GitHub%20pages%20in%20a%20submodule/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://blindgaenger.net/articles/2009-11-08%20-%20Generate%20GitHub%20pages%20in%20a%20submodule/</guid>
      <description>

&lt;h1 id=&#34;create-a-new-project-repo:5ba4cee6366c7a4ff6bc95e2588f5d10&#34;&gt;Create a new project repo&lt;/h1&gt;

&lt;p&gt;Ok, this is the basic stuff. Go to your &lt;a href=&#34;https://github.com/&#34;&gt;GitHub dashboard&lt;/a&gt;,
create a new project, and follow the instructions. I&amp;rsquo;ve called mine &lt;code&gt;foobar&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{bash
mkdir foobar
cd foobar
git init
touch README
git add README
git commit -m &amp;quot;initial commit&amp;quot;
git remote add origin git@github.com:blindgaenger/foobar.git
git push origin master
}}
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;create-an-own-branch-for-the-gh-pages:5ba4cee6366c7a4ff6bc95e2588f5d10&#34;&gt;Create an own branch for the gh-pages&lt;/h1&gt;

&lt;p&gt;There is a little docu about &lt;a href=&#34;http://pages.github.com/&#34;&gt;GitHub pages&lt;/a&gt;, but
basically you&amp;rsquo;ll need to do the following.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{bash
cd foobar
git symbolic-ref HEAD refs/heads/gh-pages
rm .git/index
git clean -fdx
echo &amp;quot;Hello, Foobar!&amp;quot; &amp;gt; index.html
git add .
git commit -a -m &amp;quot;my first gh-page&amp;quot;
git push origin gh-pages
}}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The index.html is just a dummy. But it&amp;rsquo;s necessary to commit something to make
the branch breath. Otherwise you&amp;rsquo;ll have some trouble on the next steps.&lt;/p&gt;

&lt;h1 id=&#34;check-page-online:5ba4cee6366c7a4ff6bc95e2588f5d10&#34;&gt;Check page online&lt;/h1&gt;

&lt;p&gt;Alright, after pushing your files you&amp;rsquo;re ready to check out the generated site
online at &lt;a href=&#34;http://blindgaenger.github.com/foobar/&#34;&gt;http://blindgaenger.github.com/foobar/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;GitHub says it can take up to ten minutes, but usually it&amp;rsquo;s only about 1 -2
minutes. So wait for a notification email or keep pushing the browser&amp;rsquo;s refresh
button!&lt;/p&gt;

&lt;h1 id=&#34;add-as-submodule-in-master-branch:5ba4cee6366c7a4ff6bc95e2588f5d10&#34;&gt;Add as submodule in master branch&lt;/h1&gt;

&lt;p&gt;Now there are two separate branches called &lt;code&gt;master&lt;/code&gt; and &lt;code&gt;gh-pages&lt;/code&gt;. The next
step is to reference the &lt;code&gt;gh-pages&lt;/code&gt; branch to a subdir of &lt;code&gt;master&lt;/code&gt;. By the way,
it&amp;rsquo;s not possible to reference a submodule at the root of another branch. But a
subdir is exactly what we want here.&lt;/p&gt;

&lt;p&gt;Further the official Git book warns us about &lt;a href=&#34;http://book.git-scm.com/5_submodules.html&#34;&gt;submodules&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;NOTE: Do not use local URLs here if you plan to publish your superproject!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;That&amp;rsquo;s what we want to do. Our submodule will resolve to our hosted project at
github (not to some local dir). Let&amp;rsquo;s add the submodule and &amp;ldquo;mount&amp;rdquo; it to &lt;code&gt;_site&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{bash
$ git checkout master
$ git submodule add -b gh-pages git@github.com:blindgaenger/foobar.git _site
$ git status
# On branch master
# Changes to be committed:
#   (use &amp;quot;git reset HEAD &amp;lt;file&amp;gt;...&amp;quot; to unstage)
#
#    new file:   .gitmodules
#    new file:   _site
#
$ git commit -m &amp;quot;added gh-pages as submodule&amp;quot;
$ git push
}}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;git status&lt;/code&gt; shows a new &lt;code&gt;.gitmodules&lt;/code&gt; file, which stores informations about
the submodules. And of course the &lt;code&gt;_site&lt;/code&gt; directory we specified.&lt;/p&gt;

&lt;p&gt;Now init the submodule and check out which revision it points to.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{bash
$ git submodule init
Submodule &#39;_site&#39; (git@github.com:blindgaenger/foobar.git) registered for path &#39;_site&#39;
$ git submodule 
 509dbc55199d7efb6fbb4180bc898a0c5b6830de _site (heads/gh-pages)
}}
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;build-a-website-using-jekyll:5ba4cee6366c7a4ff6bc95e2588f5d10&#34;&gt;Build a website using Jekyll&lt;/h1&gt;

&lt;p&gt;At best you reed the &lt;a href=&#34;http://wiki.github.com/mojombo/jekyll&#34;&gt;Jekyll wiki&lt;/a&gt;. But
to get you started, let&amp;rsquo;s create some dummy files. At first put this in a
&lt;code&gt;index.markdown&lt;/code&gt; file&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{markdown
---
layout: default
title: Foobar page
---

# Text

foo foo foo foo foo foo foo foo.

bar bar bar bar bar bar bar bar.

# List

* foo
* bar
* baz
}}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now create a &lt;code&gt;_layouts&lt;/code&gt; directory and a &lt;code&gt;default.html&lt;/code&gt; file in it. It&amp;rsquo;s a basic
HTML file. Please note, that it&amp;rsquo;s just an example here!&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{
&amp;lt;html&amp;gt;
  &amp;lt;head&amp;gt;
    &amp;lt;title&amp;gt;{{ page.title }}&amp;lt;/title&amp;gt;
  &amp;lt;/head&amp;gt;
  &amp;lt;body&amp;gt;
    &amp;lt;h1&amp;gt;{{ page.title }}&amp;lt;/h1&amp;gt;
    {{ content }}
  &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
}}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;What will happen? At first the &lt;code&gt;index.markdown&lt;/code&gt; is parsed. The &lt;code&gt;layout:&lt;/code&gt;
specification on top will search for a file called &lt;code&gt;_layout/default.html&lt;/code&gt;, which
we&amp;rsquo;ve just created. Then the layout file will be filled with &lt;code&gt;title&lt;/code&gt; and
&lt;code&gt;content&lt;/code&gt; of the page. Note that you can put any variable in the header section
and use it in your layout as &lt;code&gt;{{ page.lala }}&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Of course, don&amp;rsquo;t forget to commit your changes.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{bash
$ git status
# On branch master
# Untracked files:
#   (use &amp;quot;git add &amp;lt;file&amp;gt;...&amp;quot; to include in what will be committed)
#
#    _layouts/
#    index.markdown
#
$ git add .
$ git commit -m &amp;quot;some example files&amp;quot;
}}
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;generate-it-in-our-subdir:5ba4cee6366c7a4ff6bc95e2588f5d10&#34;&gt;Generate it in our subdir&lt;/h1&gt;

&lt;p&gt;To generate the website we just have to call &lt;code&gt;jekyll&lt;/code&gt; in our project dir. This
will put the generated files straight to the &lt;code&gt;_site&lt;/code&gt; dir, which is the default.
See the jekyll website what this &lt;code&gt;_config.yml&lt;/code&gt; is all about.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{bash
$ jekyll
WARNING: Could not read configuration. Using defaults (and options).
    No such file or directory - ./_config.yml
Building site: . -&amp;gt; ./_site
Successfully generated site: . -&amp;gt; ./_site
}}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now take a look in &lt;code&gt;_site&lt;/code&gt; and you&amp;rsquo;ll see the &lt;code&gt;index.html&lt;/code&gt; (we added in our
first commit to the &lt;code&gt;gh-pages&lt;/code&gt; branch) has changed to this:&lt;/p&gt;

&lt;p&gt;{{
&lt;html&gt;
  &lt;head&gt;
    &lt;title&gt;Foobar page&lt;/title&gt;
  &lt;/head&gt;
  &lt;body&gt;
    &lt;h1&gt;Foobar page&lt;/h1&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;h2 id=&#39;text&#39;&amp;gt;Text&amp;lt;/h1&amp;gt;

&amp;lt;p&amp;gt;foo foo foo foo foo foo foo foo.&amp;lt;/p&amp;gt;

&amp;lt;p&amp;gt;bar bar bar bar bar bar bar bar.&amp;lt;/p&amp;gt;

&amp;lt;h2 id=&#39;list&#39;&amp;gt;List&amp;lt;/h1&amp;gt;

&amp;lt;ul&amp;gt;
  &amp;lt;li&amp;gt;foo&amp;lt;/li&amp;gt;
  &amp;lt;li&amp;gt;bar&amp;lt;/li&amp;gt;
  &amp;lt;li&amp;gt;baz&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/body&gt;
&lt;/html&gt;
}}&lt;/p&gt;

&lt;p&gt;Great, this is what we expected!&lt;/p&gt;

&lt;h1 id=&#34;where-are-my-changes:5ba4cee6366c7a4ff6bc95e2588f5d10&#34;&gt;Where are my changes?&lt;/h1&gt;

&lt;p&gt;If you now check the status, you&amp;rsquo;ll see no changed files. Why? Because all
changed content &lt;code&gt;_site&lt;/code&gt; is seen as changed for the submodule, not for the master
branch. So &lt;code&gt;cd&lt;/code&gt; to &lt;code&gt;_site&lt;/code&gt; and repeat it there:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{bash
$ git status
$ cd _site
$ git status
}}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is what we expected to see. Now add, commit and push &lt;code&gt;_site&lt;/code&gt;. Note we only
push the &lt;code&gt;gh-pages&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{bash
$ cd _site
$ git add .
$ git commit -m &amp;quot;site generated&amp;quot;
$ git push origin gh-pages
}}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now go back to the project&amp;rsquo;s root dir, and you&amp;rsquo;ll see that &lt;code&gt;_site&lt;/code&gt; has changed.
That&amp;rsquo;s right! Because the submodule has been commited in the previous step.
So let&amp;rsquo;s tell the &lt;code&gt;master&lt;/code&gt; branch, that it should use exactly this revision.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{bash
$ git commit -a -m &amp;quot;build site&amp;quot;
$ git push origin master
}}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now both branches should be pushed to github and master &lt;code&gt;_site&lt;/code&gt; points to the up
to date &lt;code&gt;gh-pages&lt;/code&gt;.&lt;/p&gt;

&lt;h1 id=&#34;regeneration-of-site:5ba4cee6366c7a4ff6bc95e2588f5d10&#34;&gt;Regeneration of site&lt;/h1&gt;

&lt;p&gt;This is just a starting point. Of course you want to work with it, here is a
short list of the steps you&amp;rsquo;re likely to perform.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Edit some file (e.g. index.markdown).&lt;/li&gt;
&lt;li&gt;run &lt;code&gt;jekyll&lt;/code&gt; to regenerate&lt;/li&gt;
&lt;li&gt;check if in &lt;code&gt;_site&lt;/code&gt; is what you want&lt;/li&gt;
&lt;li&gt;add, commit and push changes &lt;strong&gt;in&lt;/strong&gt; &lt;code&gt;_site&lt;/code&gt; subdirectory&lt;/li&gt;
&lt;li&gt;add, commit and push changes &lt;strong&gt;in the project&lt;/strong&gt; (including &lt;code&gt;_site&lt;/code&gt; subdir)&lt;/li&gt;
&lt;li&gt;do it again!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;One note about Jekyll&amp;rsquo;s build-in options. When editing your sources it&amp;rsquo;s very
useful to run a local server. This command will auto-regenerate the site on each
edit and show them via the local server at &lt;code&gt;http://localhost:4567&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{bash
jekyll --auto --server 4567
}}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That&amp;rsquo;s it!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Install gems from GitHub like from RubyForge</title>
      <link>http://blindgaenger.net/articles/2008-09-15-install-gems-from-github-like-from-rubyforge/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://blindgaenger.net/articles/2008-09-15-install-gems-from-github-like-from-rubyforge/</guid>
      <description>&lt;p&gt;Install gems from GitHub directly without specifying the source, just like you
would if you were installing them from RubyForge.&lt;/p&gt;

&lt;p&gt;Update rubygems to 2.1
{% highlight bash %}
$ sudo gem update &amp;ndash;system
{% endhighlight %}&lt;/p&gt;

&lt;p&gt;Add the sources to rubygems, so the gem names can be resolved to a source url.
{% highlight bash %}
$ sudo gem sources -a &lt;a href=&#34;http://gems.github.com&#34;&gt;http://gems.github.com&lt;/a&gt;
{% endhighlight %}&lt;/p&gt;

&lt;p&gt;Try it with a gem on GitHub.
{% highlight bash %}
$ sudo gem install simplificator-rwebthumb
{% endhighlight %}&lt;/p&gt;

&lt;p&gt;Links
&lt;a href=&#34;http://github.com/blog/97-github-loves-rubygems-1-2&#34;&gt;http://github.com/blog/97-github-loves-rubygems-1-2&lt;/a&gt;
&lt;a href=&#34;http://gems.github.com/&#34;&gt;http://gems.github.com/&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>