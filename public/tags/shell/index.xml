<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Shell on blindgaenger</title>
    <link>http://blindgaenger.net/tags/shell/</link>
    <description>Recent content in Shell on blindgaenger</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="http://blindgaenger.net/tags/shell/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Advanced Git aliases</title>
      <link>http://blindgaenger.net/articles/2009-11-10%20-%20Advanced%20Git%20aliases/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://blindgaenger.net/articles/2009-11-10%20-%20Advanced%20Git%20aliases/</guid>
      <description>

&lt;p&gt;Started with git&amp;rsquo;s commandline, tried some other tools like &lt;a href=&#34;http://github.com/rtomayko/git-sh/&#34;&gt;git-sh&lt;/a&gt; for a while, I&amp;rsquo;ve returned to the core cli. Not because it is so awesome, but &lt;code&gt;git&lt;/code&gt; has become just another tool for the shell. Which is a good thing!&lt;/p&gt;

&lt;p&gt;Nevertheless I use a lot of aliases. So here are some I&amp;rsquo;ve created and considered as useful extensions to standard aliases like &lt;code&gt;git s&lt;/code&gt;. Simply put them in the &lt;code&gt;[alias]&lt;/code&gt; section of your &lt;code&gt;~/.gitconfig&lt;/code&gt;. By the way, I&amp;rsquo;ve tried not to use aliases in the examples.&lt;/p&gt;

&lt;h1 id=&#34;make-this-a-git-repo:7a0cad519bc77bac7dd5685cb8dbf268&#34;&gt;Make &lt;em&gt;this&lt;/em&gt; a git repo&lt;/h1&gt;

&lt;p&gt;You do this very often? So don&amp;rsquo;t repeat yourself!&lt;/p&gt;

&lt;p&gt;{{&lt;br /&gt;
this = !git init &amp;amp;&amp;amp; git add . &amp;amp;&amp;amp; git commit -m \&amp;ldquo;initial commit\&amp;rdquo;
}}&lt;/p&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;p&gt;{{bash
$ mkdir foobar
$ cd foobar
$ touch README
$ git this
Initialized empty Git repository in /home/blindgaenger/foobar/.git/
[master (root-commit) 77d19af] initial commit
 0 files changed, 0 insertions(+), 0 deletions(-)
 create mode 100644 README
}}&lt;/p&gt;

&lt;h1 id=&#34;amend-with-the-same-message:7a0cad519bc77bac7dd5685cb8dbf268&#34;&gt;Amend with the same message&lt;/h1&gt;

&lt;p&gt;It&amp;rsquo;s like &lt;code&gt;git commit --amend&lt;/code&gt;, but without your editor prompting you for the message you&amp;rsquo;ve already entered. But remember … &amp;ldquo;With great power comes great responsibility!&amp;rdquo;&lt;/p&gt;

&lt;p&gt;{{
amend = !git log -n 1 &amp;ndash;pretty=tformat:%s%n%n%b | git commit -F - &amp;ndash;amend
}}&lt;/p&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;p&gt;{{bash
$ touch foo
$ touch bar
$ git add foo
$ git commit -m &amp;ldquo;added foo and bar&amp;rdquo;
$ git add bar
$ git amend
[master 8335e6e] added foo and bar
 0 files changed, 0 insertions(+), 0 deletions(-)
 create mode 100644 bar
 create mode 100644 foo
}}&lt;/p&gt;

&lt;h1 id=&#34;remove-files-which-have-been-deleted:7a0cad519bc77bac7dd5685cb8dbf268&#34;&gt;Remove files which have been deleted&lt;/h1&gt;

&lt;p&gt;Based on a command from &lt;a href=&#34;http://technicalpickles.com/&#34;&gt;Technical Pickles&lt;/a&gt;, I&amp;rsquo;ve added correct handling of whitespaces in filenames.&lt;/p&gt;

&lt;p&gt;{{
r  = !git ls-files -z &amp;ndash;deleted | xargs -0 git rm
}}&lt;/p&gt;

&lt;p&gt;Example:
{{bash
$ touch &amp;ldquo;franz kafka&amp;rdquo;
$ git add franz\ kafka
$ git commit -m &amp;ldquo;added franz kafka&amp;rdquo;
…
$ rm franz\ kafka
$ git r
rm &amp;lsquo;franz kafka&amp;rsquo;
$ git x &amp;ldquo;deleted it again&amp;rdquo;
[master 1b993c5] deleted it again
 0 files changed, 0 insertions(+), 0 deletions(-)
 delete mode 100644 you
}}&lt;/p&gt;

&lt;h1 id=&#34;show-all-defined-aliases:7a0cad519bc77bac7dd5685cb8dbf268&#34;&gt;Show all defined aliases&lt;/h1&gt;

&lt;p&gt;You&amp;rsquo;ll need this if you have a lot of aliases. :)&lt;/p&gt;

&lt;p&gt;{{
alias = !git config &amp;ndash;list | grep &amp;lsquo;alias\.&amp;rsquo; | sed &amp;rsquo;s/alias\.\([^=]&lt;em&gt;\)=\(.&lt;/em&gt;\)/\1\t=&amp;gt; \2/&amp;rsquo; | sort
}}&lt;/p&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;p&gt;{{bash
$ git alias
a       =&amp;gt; add .
alias   =&amp;gt; !git config &amp;ndash;list | grep &amp;lsquo;alias.&amp;rsquo; | sed &amp;rsquo;s/alias.([^=]&lt;em&gt;)=(.&lt;/em&gt;)/\1\t=&amp;gt; \2/&amp;rsquo; | sort
amend   =&amp;gt; !git log -n 1 &amp;ndash;pretty=tformat:%s%n%n%b | git commit -F - &amp;ndash;amend
b       =&amp;gt; branch
cb      =&amp;gt; checkout -b
co      =&amp;gt; checkout
…
}}&lt;/p&gt;

&lt;h1 id=&#34;ignore-a-file:7a0cad519bc77bac7dd5685cb8dbf268&#34;&gt;Ignore a file&lt;/h1&gt;

&lt;p&gt;Quickly add a file/dir to &lt;code&gt;.gitignore&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;{{
ignore=!([ ! -e .gitignore ] &amp;amp;&amp;amp; touch .gitignore) | echo $1 &amp;gt;&amp;gt;.gitignore
}}&lt;/p&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;p&gt;{{bash
$ touch xxx
$ git s&lt;/p&gt;

&lt;h1 id=&#34;on-branch-master:7a0cad519bc77bac7dd5685cb8dbf268&#34;&gt;On branch master&lt;/h1&gt;

&lt;h1 id=&#34;untracked-files:7a0cad519bc77bac7dd5685cb8dbf268&#34;&gt;Untracked files:&lt;/h1&gt;

&lt;h1 id=&#34;use-git-add-file-to-include-in-what-will-be-committed:7a0cad519bc77bac7dd5685cb8dbf268&#34;&gt;(use &amp;ldquo;git add &lt;file&gt;&amp;hellip;&amp;rdquo; to include in what will be committed)&lt;/h1&gt;

&lt;p&gt;#&lt;/p&gt;

&lt;h1 id=&#34;xxx:7a0cad519bc77bac7dd5685cb8dbf268&#34;&gt;xxx&lt;/h1&gt;

&lt;p&gt;nothing added to commit but untracked files present (use &amp;ldquo;git add&amp;rdquo; to track)
$ git ignore xxx
$ git s&lt;/p&gt;

&lt;h1 id=&#34;on-branch-master-1:7a0cad519bc77bac7dd5685cb8dbf268&#34;&gt;On branch master&lt;/h1&gt;

&lt;h1 id=&#34;untracked-files-1:7a0cad519bc77bac7dd5685cb8dbf268&#34;&gt;Untracked files:&lt;/h1&gt;

&lt;h1 id=&#34;use-git-add-file-to-include-in-what-will-be-committed-1:7a0cad519bc77bac7dd5685cb8dbf268&#34;&gt;(use &amp;ldquo;git add &lt;file&gt;&amp;hellip;&amp;rdquo; to include in what will be committed)&lt;/h1&gt;

&lt;p&gt;#&lt;/p&gt;

&lt;h1 id=&#34;gitignore:7a0cad519bc77bac7dd5685cb8dbf268&#34;&gt;.gitignore&lt;/h1&gt;

&lt;p&gt;nothing added to commit but untracked files present (use &amp;ldquo;git add&amp;rdquo; to track)
$ git add .gitignore
$ git commit -m &amp;ldquo;ignored xxx&amp;rdquo;
}}&lt;/p&gt;

&lt;h1 id=&#34;lil-commit:7a0cad519bc77bac7dd5685cb8dbf268&#34;&gt;Lil commit&lt;/h1&gt;

&lt;p&gt;Nothing special, but very useful. The trick is to put the &lt;code&gt;-m&lt;/code&gt; parameter at the end.&lt;/p&gt;

&lt;p&gt;{{
x  = commit -m
xa = commit -a -m&lt;/p&gt;

&lt;h1 id=&#34;just-to-complete-this-combination:7a0cad519bc77bac7dd5685cb8dbf268&#34;&gt;just to complete this combination&lt;/h1&gt;

&lt;p&gt;a = add
}}&lt;/p&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;p&gt;{{bash
$ touch baz
$ git add baz
$ git x &amp;ldquo;added baz&amp;rdquo;
[master 2d4690b] added baz
 0 files changed, 0 insertions(+), 0 deletions(-)
 create mode 100644 baz
$ echo &amp;ldquo;lala&amp;rdquo; &amp;gt;baz
$ git xa &amp;ldquo;updated baz&amp;rdquo;
[master 866f25a] updated baz
 1 files changed, 1 insertions(+), 0 deletions(-)
}}&lt;/p&gt;

&lt;h1 id=&#34;call-me-master:7a0cad519bc77bac7dd5685cb8dbf268&#34;&gt;Call me master&lt;/h1&gt;

&lt;p&gt;Not a typical alias, because it gets rid of the verb itself. But useful if you keep feature branches.&lt;/p&gt;

&lt;p&gt;{{
master = checkout master
}}&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Size of a directory on Linux</title>
      <link>http://blindgaenger.net/articles/2008-03-31-size-of-a-directory-on-linux/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://blindgaenger.net/articles/2008-03-31-size-of-a-directory-on-linux/</guid>
      <description>&lt;p&gt;Disk usage &lt;code&gt;du&lt;/code&gt; with size &lt;code&gt;-s&lt;/code&gt; in a human readable &lt;code&gt;-h&lt;/code&gt; format for the current directory.
{% highlight bash %}
du -s -h .
{% endhighlight %}&lt;/p&gt;

&lt;p&gt;For all sub-dirs &lt;code&gt;./*&lt;/code&gt;, sorted by size (numeric &lt;code&gt;-n&lt;/code&gt;). Don&amp;rsquo;t use &lt;code&gt;-h&lt;/code&gt;, otherwise 10M would be before 1G.
{% highlight bash %}
du -s ./* | sort -n
{% endhighlight %}&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.lifeaftercoffee.com/2006/04/04/how-big-is-that-unix-directory/&#34;&gt;http://www.lifeaftercoffee.com/2006/04/04/how-big-is-that-unix-directory/&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>