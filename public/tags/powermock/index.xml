<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Powermock on blindgaenger</title>
    <link>http://blindgaenger.net/tags/powermock/</link>
    <description>Recent content in Powermock on blindgaenger</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="http://blindgaenger.net/tags/powermock/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Mocking a single method with PowerMock</title>
      <link>http://blindgaenger.net/articles/2009-05-07-mocking-a-single-method-with-powerMock/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://blindgaenger.net/articles/2009-05-07-mocking-a-single-method-with-powerMock/</guid>
      <description>&lt;p&gt;Let&amp;rsquo;s say this is the Bean under test. Here the method &lt;code&gt;convert()&lt;/code&gt; is not
implemented. But it could also fire up calls to some remote system DB or be just
to complex. In any case, we want to test &lt;code&gt;say()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;{% highlight java %}
public class Bean {&lt;/p&gt;

&lt;p&gt;public String say(String name) {
      return &amp;ldquo;Hi, &amp;rdquo; + convert(name) + &amp;ldquo;!&amp;rdquo;;
   }&lt;/p&gt;

&lt;p&gt;protected String convert(String name) {
      throw new UnsupportedOperationException(&amp;ldquo;not implemented yet&amp;rdquo;);
   }&lt;/p&gt;

&lt;p&gt;}
{% endhighlight %}&lt;/p&gt;

&lt;p&gt;The example test both, the unsupported operation and our mock, to show that it
works. The magic happens in … wait for it … &lt;code&gt;createStrictPartialMockForAllMethodsExcept()&lt;/code&gt;. A
very, very long name, but it explains exactly what it&amp;rsquo;s doing. It leaves our
&lt;code&gt;say()&lt;/code&gt; untouched, but mocks all other internal calls.&lt;/p&gt;

&lt;p&gt;We expect the &lt;code&gt;convert()&lt;/code&gt; method to be called with &lt;code&gt;world&lt;/code&gt; and returns the
uppercase &lt;code&gt;WORLD&lt;/code&gt;. But it can be any value as long as you can compare it in the
&lt;code&gt;assertThat&lt;/code&gt; statement. That&amp;rsquo;s it!&lt;/p&gt;

&lt;p&gt;{% highlight java %}
import org.junit.Test;
import org.powermock.api.easymock.PowerMock;&lt;/p&gt;

&lt;p&gt;import static org.easymock.EasyMock.expect;&lt;/p&gt;

&lt;p&gt;import static org.fest.assertions.Assertions.assertThat;&lt;/p&gt;

&lt;p&gt;public class BeanTest {&lt;/p&gt;

&lt;p&gt;@Test(expected = UnsupportedOperationException.class)
   public void sayNotInplementedYet() throws Exception {
      // raises an exception, because the convert method was called
      new Bean().say(&amp;ldquo;world&amp;rdquo;);
   }&lt;/p&gt;

&lt;p&gt;@Test
   public void sayHowItShouldBe() throws Exception {
      Bean beanMock = PowerMock.createStrictPartialMockForAllMethodsExcept(Bean.class, &amp;ldquo;say&amp;rdquo;);&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  // mock the unimplemented method
  expect(beanMock.convert(&amp;quot;world&amp;quot;)).andReturn(&amp;quot;WORLD&amp;quot;);

  PowerMock.replay(beanMock);

  assertThat(beanMock.say(&amp;quot;world&amp;quot;)).isEqualTo(&amp;quot;Hi, WORLD!&amp;quot;);

  PowerMock.verify(beanMock);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;}
{% endhighlight %}&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>